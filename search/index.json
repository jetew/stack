[{"content":"前言 关于 XanMod 内核 XanMod 官网 默认的 Linux 内核被设计为一种通用解决方案，能够在不同的系统和硬件配置上提供广泛的兼容性。它稳定、可靠且经过广泛测试，但并不总是针对特定用例提供最佳性能。\n自定义内核（例如 XanMod）则能满足这一需求。XanMod 内核是基于最新稳定版本的 Linux 内核，旨在通过低延迟提高系统的响应性能。它是由社区驱动的项目，结合了其他内核的最佳特性和独特的增强功能，更加专注于优化桌面、多媒体和游戏工作负载，以提供更具响应性和流畅性的 Linux 使用体验。\n注意事项 XanMod 内核目前仅支持 X86 结构的 CPU，且目前仅支持 Debian/Ubuntu\n内核选择 XanMod 项目提供多种不同的内核构建，每种构建都针对特定的用例和硬件配置。\nXanMod MAIN 内核 MAIN 内核是标准的 XanMod，包括最新稳定版本的 Linux 内核，并针对桌面、多媒体和游戏工作负载进行了优化。MAIN 内核有四个版本可供选择：\nlinux-xanmod-x64v1 linux-xanmod-x64v2 linux-xanmod-x64v3 linux-xanmod-x64v4 XanMod EDGE 内核 EDGE 内核专为想要最新功能和增强的用户而设计，它们包括最近版本的 Linux 内核，并针对高性能工作负载进行了优化。EDGE 内核有三个版本可供选择：\nlinux-xanmod-edge-x64v2 linux-xanmod-edge-x64v3 linux-xanmod-edge-x64v4 XanMod LTS 内核 LTS（长期支持）内核是为将稳定性和可靠性放在优先考虑的用户而设计，它们包括较旧但经过更多测试的 Linux 内核版本，并针对通用工作负载进行了优化。LTS 内核有四个版本可供选择：\nlinux-xanmod-lts-x64v1 linux-xanmod-lts-x64v2 linux-xanmod-lts-x64v3 linux-xanmod-lts-x64v4 XanMod RT 内核 RT（实时）内核是为关键应用场景设计的，例如 Linux 游戏服务器、流媒体、直播制作和超低延迟需求的用户，它们包括 PREEMPT_RT 实时补丁，可降低系统的延迟并提高响应性。RT 内核有三个版本可供选择：\nlinux-xanmod-rt-x64v2 linux-xanmod-rt-x64v3 linux-xanmod-rt-x64v4 这些特定的 XanMod 内核构建被设计用于特定的硬件配置，涵盖从较旧的 x86-64 系统到最新的 AMD 和 Intel 处理器。您可以在 XanMod 官网 上找到不同内核构建硬件兼容性的更详细信息。\n安装步骤 准备工作 安装必要组件 apt update apt install -y gnupg 检测 CPU 支持版本 XanMod 有各种版本，需依据 CPU ISA（指令集架构）而选择合适的版本，我们可以通过官方提供的脚本来确认：\nawk -f \u0026lt;(wget -qO- https://dl.xanmod.org/check_x86-64_psabi.sh) 输出结果：\nCPU supports x86-64-v4 这里可以看到我的 CPU 是支持 v4 版本的，安装时可以按照此结果进行选择。\n注意：一定要选择符合的版本进行安装，否则将导致无法正常启动！\n安装 XanMod 注册 PGP 密钥：\nwget -qO - https://dl.xanmod.org/archive.key | gpg --dearmor -o /usr/share/keyrings/xanmod-archive-keyring.gpg 添加存储库：\necho \u0026#39;deb [signed-by=/usr/share/keyrings/xanmod-archive-keyring.gpg] http://deb.xanmod.org releases main\u0026#39; | tee /etc/apt/sources.list.d/xanmod-release.list 更新 APT 软件包：\napt update 安装 XanMod 内核，这里我以 XanMod MAIN x64 v4 内核为例，你可以根据自己的需求进行安装 MAIN、EDGE、LTS 或 RT 内核：\napt install -y linux-xanmod-x64v4 安装完成后可通过 reboot 进行重启使内核生效，如果遇到通过命令重启不生效的情况，可以去云服务商后台进行重启操作。\n检测内核 在终端执行 uname -r 查看内核，输出结果：\n6.7.6-x64v4-xanmod1 这说明已经成功安装并切换至 XanMod 内核了。\nBBR3 状态与队列算法 在终端执行以下命令开启 BBR3 并设置队列算法：\ncat \u0026gt; /etc/sysctl.conf \u0026lt;\u0026lt; EOF net.ipv4.tcp_congestion_control=bbr net.core.default_qdisc=fq_pie EOF 然后执行 sysctl -p 看到以下内容则说明开启成功：\nnet.ipv4.tcp_congestion_control = bbr net.core.default_qdisc = fq_pie 然后执行 reboot 重启生效。\n下面是我抄来的内核参数配置：\ncat \u0026gt; /etc/sysctl.conf \u0026lt;\u0026lt; EOF vm.swappiness = 1 net.ipv4.tcp_congestion_control = bbr net.core.default_qdisc = fq_pie fs.file-max = 1000000 fs.inotify.max_user_instances = 8192 net.ipv4.tcp_syncookies = 1 net.ipv4.tcp_fin_timeout = 30 net.ipv4.tcp_tw_reuse = 1 net.ipv4.ip_local_port_range = 1024 65000 net.ipv4.tcp_max_syn_backlog = 16384 net.ipv4.tcp_max_tw_buckets = 6000 net.ipv4.route.gc_timeout = 100 net.ipv4.tcp_syn_retries = 1 net.ipv4.tcp_synack_retries = 1 net.core.somaxconn = 32768 net.core.netdev_max_backlog = 32768 net.ipv4.tcp_timestamps = 0 net.ipv4.tcp_max_orphans = 32768 EOF 在终端执行以下命令检查 BBR3 状态：\nmodinfo tcp_bbr 输出内容：\nname: tcp_bbr filename: (builtin) version: 3 description: TCP BBR (Bottleneck Bandwidth and RTT) license: Dual BSD/GPL file: net/ipv4/tcp_bbr author: David Morley \u0026lt;morleyd@google.com\u0026gt; author: Arjun Roy \u0026lt;arjunroy@google.com\u0026gt; author: Kevin Yang \u0026lt;yyd@google.com\u0026gt; author: Yousuk Seung \u0026lt;ysseung@google.com\u0026gt; author: Priyaranjan Jha \u0026lt;priyarjha@google.com\u0026gt; author: Soheil Hassas Yeganeh \u0026lt;soheil@google.com\u0026gt; author: Yuchung Cheng \u0026lt;ycheng@google.com\u0026gt; author: Neal Cardwell \u0026lt;ncardwell@google.com\u0026gt; author: Van Jacobson \u0026lt;vanj@google.com\u0026gt; 可以看到已成功开启 BBR3，如果报错可以先执行 depmod\n执行以下命令查看队列算法：\nsysctl net.core.default_qdisc 输出结果：\nnet.core.default_qdisc = fq_pie ","date":"2024-03-01T05:26:41+08:00","permalink":"/archives/xanmod/","title":"Linux 安装 XanMod 内核开启 BBR V3"},{"content":"前言 在之前的文章 《Waline 服务端独立部署方案》 中有讲到过进行源码编译安装 Node ，但只是带过一下。其实我在使用 Debian 时直接进行编译安装是没有问题的，但是在 CentOS7 下，遇到许多问题；于是便在此记录一下方便日后进行查阅。\n安装步骤 准备工作 软件依赖 gcc g++ ≥ 10.1 GNU Make ≥ 3.81 Python 安装依赖 yum install -y python3 make python3-pip gcc 和 gcc-c++ 由于 yum 源版本过低，需要另外进行编译安装，参考 《CentOS 7 编译安装 gcc》 下载源码 从 Nodejs官网 下载源码并进行解压\ncd /usr/local/src wget https://nodejs.org/dist/v20.11.1/node-v20.11.1.tar.gz tar zxvf node-v20.11.1.tar.gz 编译安装 cd node-v20.11.1 ./configure --prefix=/usr/local/node # 输出 …… INFO: configure completed successfully # 创建窗口，防止网络问题断开终端导致安装中止 screen -S node make make install 这里可以通过 make -j 设置线程数来提升编译速度，如果不清楚该设置多少，可以通过 make -j$(nproc) 自动计算线程数：\nmake -j$(nproc) make install 为软件设置环境变量：\nvim ~/.bashrc 在最后添加：\nexport PATH=/usr/local/node/bin:$PATH export CPATH=/usr/local/node/include:$CPATH export LD_LIBRARY_PATH=/usr/local/node/lib:$LD_LIBRARY_PATH 刷新变量环境：\nsource ~/.bashrc 完成后可通过 node -v 、 npm version 、 npx -v 进行验证，返回版本号则表示成功。\n可能出现的问题 安装过程中可能会出现 …… : Error: no such instruction: …… 若遇到此问题则需要通过编译安装新版 binutils\n编译安装 binutils 可通过 GNU官方镜像 下载新版源码，国内服务器可使用 清华大学镜像 cd /usr/local/src # 国内服务器可更换为清华大学镜像下载地址 wget https://ftp.gnu.org/gnu/binutils/binutils-2.42.tar.gz tar zxvf binutils-2.42.tar.gz cd binutils-2.42 ./configure --prefix=/usr/local/binutils # 输出 ………… ………… configure: creating ./config.status config.status: creating Makefile make make install 卸载旧版本：\nyum remove -y binutils 设置环境变量：\nvim ~/.bashrc 在最后添加：\nexport PATH=/usr/local/binutils/bin:$PATH export CPATH=/usr/local/binutils/include:$CPATH export LD_LIBRARY_PATH=/usr/local/binutils/lib:$LD_LIBRARY_PATH 刷新变量环境：\nsource ~/.bashrc 最后编辑 /etc/yum.conf 为 node 和 binutils 添加忽略：\nvim /etc/yum.conf 在末尾添加上：\nexclude=node*,binutils* 参考资料 Building Node.js from source on supported platforms guide to porting the binutils ","date":"2024-02-25T23:37:17+08:00","permalink":"/archives/make_node/","title":"CentOS7 编译安装 Node"},{"content":"前言 在使用 VPS 时，可能会碰到主机商并没有提供我们所需要的系统，或者有些主机商的操作系统会带一些 “无关” 进程；这个时候我们就可以通过一键重装工具来安装一款我们需要的，干净的操作系统。\nGithub项目地址 使用说明 准备工作 下载脚本：\nwget --no-check-certificate -qO InstallNET.sh \u0026#39;https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh\u0026#39; \u0026amp;\u0026amp; chmod a+x InstallNET.sh 国内主机使用以下命令：\nwget --no-check-certificate -qO InstallNET.sh \u0026#39;https://gitee.com/mb9e8j2/Tools/raw/master/Linux_reinstall/InstallNET.sh\u0026#39; \u0026amp;\u0026amp; chmod a+x InstallNET.sh 如果报错，则需要安装 wget\nDebian 系：\napt update -y apt install -y wget RedHat 7：\nyum install -y wget Redhat 8(8+)：\ndnf install wget -y Alpine Linux：\napk update apk add bash wget sed -i \u0026#39;s/root:\\/bin\\/ash/root:\\/bin\\/bash/g\u0026#39; /etc/passwd 脚本参数 使用脚本时，需要自己添加参数；基本参数如下：\nbash InstallNET.sh 系统选择：\nDebian -debian\n7-12 如安装 Debian 12 则参数为 -debian 12\nCentOS -centos\n7、8/9-stream 如安装 CentOS7 则参数为 -centos 7 CentOS 9 为-centos 9-stream\nUbuntu -ubuntu\n18.04/20.04/22.04 ， 如 -ubuntu 22.04\nKali -kali\nrolling/dev/experimental 分别对应 Kali Rolling, Development 和 Experimental ， 如 -kali rolling\nAlpine -alpine\n3.16-3.18/edge ， 如 -alpine dege\nAlmaLinux almalinux 或 alma\n8/9 ， 如 -alma 9\nRockyLinux -rockylinux 或 -rocky\n8/9 ， 如 -rocky 9\nFedora -fedora\n38/39 ， 如 -fedora 39\nWindows 10/11/2012/2016/2019/2022 ， 如 -windows 2022\n可选发行版列表：\nWindows 10 Enterprise LTSC 22H2 for simplified Chinese and Japanese, 23H2 for English\nWindows 11 Pro for Workstation 22H2 for simplified Chinese and Japanese, 23H2 for English\nWindows Server 2012 R2\nWindows Server 2016\nWindows Server 2019\nWindows Server 2022\n其他基本参数：\n-lang/-language \u0026quot;cn\u0026quot;\n此选项为 Windows 镜像设置语言， 如 -lang \u0026quot;en\u0026quot; \u0026quot;cn\u0026quot; 为简体中文， \u0026quot;en\u0026quot; 为英文， \u0026quot;jp\u0026quot;为日文。\n-port \u0026quot;22\u0026quot;\n此选项为 Linux SSH 端口，默认为 22 可选 1~65535；该参数不可用于 Windows\n-pwd/-password \u0026quot;yourpassword\u0026quot;\n此选项可为系统设置密码\n-hostname \u0026quot;yourhostname\u0026quot;\n此选项可设置主机名\n-mirror \u0026quot;mirror url\u0026quot;\n通过镜像下载安装，可设置与服务器实际位置接近的镜像地址以加快下载速度\n如国内主机，可通过中科大源：\nhttps://mirrors.ustc.edu.cn/debian/ 或清华源：\nhttps://mirrors.tuna.tsinghua.edu.cn/debian/ 更多镜像地址如下：\nDebian：\nhttps://www.debian.org/mirror/list.html CentOS7/8-stream：\nhttps://www.centos.org/download/mirrors CentOS 9-stream/+：\nhttps://admin.fedoraproject.org/mirrormanager/mirrors/CentOS Ubuntu：\nhttps://launchpad.net/ubuntu/+cdmirrors Kali：\nhttps://http.kali.org/README.mirrorlist Alpine Linux：\nhttps://mirrors.alpinelinux.org/ RockyLinux：\nhttps://mirrors.rockylinux.org/mirrormanager/mirrors Fedora：\nhttps://admin.fedoraproject.org/mirrormanager/mirrors/Fedora -timezone \u0026quot;Asia/Shanghai\u0026quot;\n手动设置时区，若输入的时区参数有误，则自动设置为 \u0026ldquo;Asia/Tokyo\u0026rdquo;；若未设置该参数，则按照访客 IP 地理位置分配，该选项不可用于 Windows 系统\n-swap/-virtualmemory/-virtualram \u0026quot;4096\u0026quot;\n指定磁盘空间为 Linux 添加交换分区，单位为 MB， 如添加 2GB Swap， 参数为 -swap \u0026quot;2048\u0026quot;\n使用参考： 例如国内服务器从清华大学源下载 Debian12 镜像安装，设置时区为 Asia/Shanghai，并设置主机名、SSH 端口、密码、交换分区：\nbash InstallNET.sh -debian 12 -mirror \u0026#34;https://mirrors.tuna.tsinghua.edu.cn/debian/\u0026#34; -hostname \u0026#34;Debian\u0026#34; -port \u0026#34;1234\u0026#34; -pwd \u0026#34;debian123\u0026#34; -timezone \u0026#34;Asia/Shanghai\u0026#34; -swap \u0026#34;2048\u0026#34; 或者直接一步到位：\nbash \u0026lt;(wget --no-check-certificate -qO- \u0026#39;https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh\u0026#39;) -debian 12 -mirror \u0026#34;mirror link\u0026#34; -hostname \u0026#34;hostname\u0026#34; -port \u0026#34;prot\u0026#34; -pwd \u0026#34;password\u0026#34; -timezone \u0026#34;Asia/Shanghai\u0026#34; -swap \u0026#34;2048\u0026#34; 回车后等待脚本运行，运行完成后检查配置一致性（网络配置和自定义配置是否正确）：\n确定后即可输入 reboot 重启 VPS 等待重新安装了，此时可通过主机商提供的 VNC 连接查看安装过程。\n详细使用说明请查看 Linux reinstall useage 参考资料 Github 项目地址 Linux reinstall useage ","date":"2024-02-03T10:21:02+08:00","permalink":"/archives/installnet/","title":"VPS 一键重装系统工具"},{"content":"前言 继 LNMP 供应链投毒事件 后，知名 LNMP 部署工具 Oneinstack 也被发现挂码，参考 Oneinstack 项目 Issues #487 和 Issues #511 此事在 Github 和 V2EX 上已有帖子在讨论；而始作俑者 金华市矜贵网络科技有限公司 至今陆续拥有了 WDCP、LNMP 一建包 和 Oneinstack；鉴于金华矜贵还试图收购秋水逸冰大佬的 LAMP 一键安装包 (但被秋大拒绝了)，他们后续可能还会盯上其他部署工具；所以建议大家最近有使用过上述工具的直接重装系统。\n而对 LNMP 一建包和 Oneinstack 有使用需求的人不在少数，所以我们必须寻找替代品，如上文提到的秋水逸冰大佬的 LAMP/LCMP 一键包或者学着自己进行搭建与配置。\n脚本推荐 LAMP 一键包 LAMP 一键安装包是一个用 Linux Shell 编写的可以为 Amazon Linux 2/CentOS/Debian/Ubuntu 系统的 VPS 或服务器安装 LAMP(Linux + Apache + MySQL/MariaDB + PHP) 生产环境的 Shell 脚本。\nLAMP 一键包官网 Github 项目地址 LCMP 一键包 LCMP 一键包 (Linux + Caddy2 + MySQL/MariaDB + PHP) 是一个强大的 Bash 脚本，用于安装 Caddy2 + MariaDB + PHP；可以通过 yum 或 apt-get 命令在内存较小的 VPS 中安装 Caddy2 + MariaDB + PHP，只需在安装前输入数字选择要安装的内容即可；同为秋水逸冰大佬制作\nGithub 项目地址 接下来看下如何手动安装及配置。\n安装与配置 安装必要软件和依赖 apt update apt install -y debian-keyring debian-archive-keyring build-essential gcc g++ make cmake autoconf libjpeg62-turbo-dev libjpeg-dev libpng-dev libwebp7 libwebp-dev libfreetype6 libfreetype6-dev libssh2-1-dev libmhash2 libpcre3 libpcre3-dev gzip libbz2-1.0 libbz2-dev libgd-dev libxml2 libxml2-dev libsodium-dev argon2 libargon2-1 libargon2-dev libiconv-hook-dev zlib1g zlib1g-dev libc6 libc6-dev libc-client2007e-dev libglib2.0-0 libglib2.0-dev bzip2 libzip-dev libbz2-1.0 libncurses5 libncurses5-dev libaio1 libaio-dev numactl libreadline-dev curl libcurl3-gnutls libcurl4-openssl-dev e2fsprogs libkrb5-3 libkrb5-dev libltdl-dev libidn11-dev openssl net-tools libssl-dev libtool libevent-dev bison re2c libsasl2-dev libxslt1-dev libicu-dev locales patch vim zip unzip tmux htop bc dc expect libexpat1-dev libonig-dev libtirpc-dev rsync git lsof lrzsz rsyslog cron logrotate chrony libsqlite3-dev psmisc wget sysv-rc apt-transport-https ca-certificates software-properties-common gnupg screen 编译和安装软件之前可以通过执行 screen -S lcmp 创建窗口，防止网络不稳定等不确定因素断连导致安装或编译中断 若要恢复窗口，执行 screen -r lcmp 即可\n安装 Caddy 可以使用 apt 命令通过 Caddy 官方存储库进行安装，参考 这一篇 我这里主要讲手动安装\n创建必要文件夹、用户与组\nmkdir -p /etc/caddy mkdir -p /var/log/caddy groupadd caddy useradd -g caddy -m -d /var/lib/caddy -s /usr/sbin/nologin caddy 下载二进制文件、解压、移动至安装文件夹并赋予可执行权限\ncd /usr/local/src wget https://github.com/caddyserver/caddy/releases/download/v2.7.6/caddy_2.7.6_linux_amd64.tar.gz tar zxf caddy_2.7.6_linux_amd64.tar.gz mv caddy /usr/bin/ chmod +x /usr/bin/caddy 配置 Caddy 首先为 Caddy 创建网站目录和 SSL 存放目录，网站目录我设置为 /data/www，自有证书存放目录在 /var/lib/caddy/ssl\nmkdir -p /data/www/default mkdir -p /var/lib/caddy/ssl 添加 Systemd 脚本，并设置开机启动\ncat \u0026gt; /usr/lib/systemd/system/caddy.service \u0026lt;\u0026lt; EOF [Unit] Description=Caddy After=network.target network-online.target Requires=network-online.target [Service] Type=notify User=caddy Group=caddy ExecStart=/usr/bin/caddy run --environ --config /etc/caddy/Caddyfile ExecReload=/usr/bin/caddy reload --config /etc/caddy/Caddyfile --force TimeoutStopSec=5s LimitNOFILE=1048576 PrivateTmp=true ProtectSystem=full AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE [Install] WantedBy=multi-user.target EOF systemctl enable caddy 编辑 Caddyfile 配置文件，并进行重写，位于 /etc/caddy/Caddyfile\ncat \u0026gt; /etc/caddy/Caddyfile \u0026lt;\u0026lt; EOF { admin off log { output file /var/log/caddy/access.log { roll_size 100mb roll_keep_for 15d } } email jettwan@outlook.com acme_ca https://acme.zerossl.com/v2/DV90 } :80 { root * /data/www/default header { Strict-Transport-Security \u0026#34;max-age=31536000; preload\u0026#34; X-Content-Type-Options nosniff X-Frame-Options SAMEORIGIN } encode gzip # php_fastcgi unix//dev/shm/php-cgi.sock file_server browse } EOF caddy fmt --overwrite /etc/caddy/Caddyfile 为相应文件夹赋予权限\nchown -R caddy:caddy /etc/caddy chown -R caddy:caddy /var/lib/caddy chown -R caddy:caddy /var/log/caddy chown -R caddy:caddy /data/www 安装 MariaDB 可以使用预编译的二进制包安装或者源码编译进行安装，自行选择即可；我推荐使用二进制包进行安装。\n安装前的准备 为 MariaDB 创建用户组，创建安装目录并设置权限\ngroupadd mysql useradd -g mysql -M -s /usr/sbin/nologin mysql mkdir -p /usr/local/mariadb mkdir -p /data/mariadb chown -R mysql:mysql /usr/local/mariadb chown -R mysql:mysql /data/mariadb 编译安装 Jemalloc 为 MariaDB 提供内存分配管理\ncd /usr/local/src wget https://github.com/jemalloc/jemalloc/archive/5.3.0.tar.gz tar zxf 5.3.0.tar.gz cd jemalloc-5.3.0 autoconf ./configure make -j$(nproc) make install 链接动态库\nln -s /usr/local/lib/libjemalloc.so.2 /usr/lib/libjemalloc.so.1 echo \u0026#39;/usr/local/lib\u0026#39; \u0026gt; /etc/ld.so.conf.d/jemalloc.conf ldconfig 二进制安装 下载二进制包\ncd /usr/local/src wget https://archive.mariadb.org/mariadb-10.11.7/bintar-linux-systemd-x86_64/mariadb-10.11.7-linux-systemd-x86_64.tar.gz 国内主机可以使用清华源地址：\nwget https://mirrors.tuna.tsinghua.edu.cn/mariadb/mariadb-10.11.7/bintar-linux-systemd-x86_64/mariadb-10.11.7-linux-systemd-x86_64.tar.gz 只需要将下载好的预编译二进制文件解压到安装位置，然后更改相关文件的配置即可\ncd /usr/local/src tar zxf mariadb-10.11.7-linux-systemd-x86_64.tar.gz mv /usr/local/src/mariadb-10.11.7-linux-systemd-x86_64/* /usr/local/mariadb # 为 MariaDB 开启 Jemalloc 支持 sed -i \u0026#39;s@executing mysqld_safe@executing mysqld_safe\\nexport LD_PRELOAD=/usr/local/lib/libjemalloc.so@\u0026#39; /usr/local/mariadb/bin/mysqld_safe # 更改相关文件中 MariaDB 安装位置 sed -i \u0026#34;s@/usr/local/mysql@/usr/local/mariadb@g\u0026#34; /usr/local/mariadb/bin/mysqld_safe 配置 MariaDB 首先设置 Service 脚本，方便进行管理；这里主要设置一下安装路径和数据路径\ncp /usr/local/mariadb/support-files/mysql.server /etc/init.d/mysql # 更改 MariaDB安装位置 sed -i \u0026#34;s@^basedir=.*@basedir=/usr/local/mariadb@\u0026#34; /etc/init.d/mysql # 更改 MariaDB 数据位置 sed -i \u0026#34;s@^datadir=.*@datadir=/data/mariadb@\u0026#34; /etc/init.d/mysql chmod +x /etc/init.d/mysql 接着来配置下 my.cnf 文件\ncat \u0026gt; /etc/my.cnf \u0026lt;\u0026lt; EOF [client] port = 3306 socket = /tmp/mysql.sock default-character-set = utf8mb4 [mysqld] port = 3306 socket = /tmp/mysql.sock basedir = /usr/local/mariadb datadir = /data/mariadb pid-file = /data/mariadb/mysql.pid user = mysql bind-address = 0.0.0.0 server-id = 1 init-connect = \u0026#39;SET NAMES utf8mb4\u0026#39; character-set-server = utf8mb4 skip-name-resolve #skip-networking back_log = 300 max_connections = 1000 max_connect_errors = 6000 open_files_limit = 65535 table_open_cache = 128 max_allowed_packet = 500M binlog_cache_size = 1M max_heap_table_size = 8M tmp_table_size = 16M read_buffer_size = 2M read_rnd_buffer_size = 8M sort_buffer_size = 8M join_buffer_size = 8M key_buffer_size = 4M thread_cache_size = 8 query_cache_type = 1 query_cache_size = 8M query_cache_limit = 2M ft_min_word_len = 4 log_bin = mysql-bin binlog_format = mixed expire_logs_days = 7 log_error = /data/mariadb/mysql-error.log slow_query_log = 1 long_query_time = 1 slow_query_log_file = /data/mariadb/mysql-slow.log performance_schema = 0 #lower_case_table_names = 1 skip-external-locking default_storage_engine = InnoDB innodb_file_per_table = 1 innodb_open_files = 500 innodb_buffer_pool_size = 64M innodb_write_io_threads = 4 innodb_read_io_threads = 4 innodb_purge_threads = 1 innodb_flush_log_at_trx_commit = 2 innodb_log_buffer_size = 2M innodb_log_file_size = 32M innodb_max_dirty_pages_pct = 90 innodb_lock_wait_timeout = 120 bulk_insert_buffer_size = 8M myisam_sort_buffer_size = 8M myisam_max_sort_file_size = 10G interactive_timeout = 28800 wait_timeout = 28800 [mysqldump] quick max_allowed_packet = 500M [myisamchk] key_buffer_size = 8M sort_buffer_size = 8M read_buffer = 4M write_buffer = 4M EOF 然后进行如下修改：\n# 最大连接数，改为内存（单位：M）/3 max_connections = # 内存 1500M - 2500M 改成如下： thread_cache_size = 16 query_cache_size = 16M myisam_sort_buffer_size = 16M key_buffer_size = 16M innodb_buffer_pool_size = 128M tmp_table_size = 32M table_open_cache = 256 # 内存 2500M - 3500M 改成如下： thread_cache_size = 32 query_cache_size = 32M myisam_sort_buffer_size = 32M key_buffer_size = 64M innodb_buffer_pool_size = 512M tmp_table_size = 64M table_open_cache = 512 # 内存大于 3500M 改成如下： thread_cache_size = 64 query_cache_size = 64M myisam_sort_buffer_size = 64M key_buffer_size = 256M innodb_buffer_pool_size = 1024M tmp_table_size = 128M table_open_cache = 1024 创建必要文件、文件夹，并赋予权限\ntouch /tmp/mysql.sock chown mysql:mysql /tmp/mysql.sock mkdir -p /data/mariadb touch /data/mariadb/{mysql.pid,mysql-error.log,mysql-slow.log} chown -R mysql:mysql /data/mariadb chmod 664 /tmp/mysql.sock /data/mariadb/* chown -R mysql:mysql /usr/local/mariadb 添加环境变量\necho \u0026#39;export PATH=/usr/local/mariadb/bin:$PATH\u0026#39; \u0026gt; /etc/profile.d/mysql.sh source /etc/profile 接下来使用自带的脚本进行数据导入及初始化\n/usr/local/mariadb/scripts/mysql_install_db --user=mysql --basedir=/usr/local/mariadb/ --datadir=/data/mariadb 完成之后，赋予 my.cnf 对应的权限并启动 MariaDB\nchmod 600 /etc/my.cnf systemctl daemon-reload service mysql start 然后执行下面命令进行安全设置，dbrootpwd= 设置为你要设置的密码\ndbrootpwd=\u0026#34;password\u0026#34; /usr/local/mariadb/bin/mysql -e \u0026#34;grant all privileges on *.* to root@\u0026#39;127.0.0.1\u0026#39; identified by \\\u0026#34;${dbrootpwd}\\\u0026#34; with grant option;\u0026#34; /usr/local/mariadb/bin/mysql -e \u0026#34;grant all privileges on *.* to root@\u0026#39;localhost\u0026#39; identified by \\\u0026#34;${dbrootpwd}\\\u0026#34; with grant option;\u0026#34; /usr/local/mariadb/bin/mysql -uroot -p${dbrootpwd} -e \u0026#34;delete from mysql.user where Password=\u0026#39;\u0026#39; and User not like \u0026#39;mariadb.%\u0026#39;;\u0026#34; /usr/local/mariadb/bin/mysql -uroot -p${dbrootpwd} -e \u0026#34;delete from mysql.db where User=\u0026#39;\u0026#39;;\u0026#34; /usr/local/mariadb/bin/mysql -uroot -p${dbrootpwd} -e \u0026#34;delete from mysql.proxies_priv where Host!=\u0026#39;localhost\u0026#39;;\u0026#34; /usr/local/mariadb/bin/mysql -uroot -p${dbrootpwd} -e \u0026#34;drop database test;\u0026#34; /usr/local/mariadb/bin/mysql -uroot -p${dbrootpwd} -e \u0026#34;reset master;\u0026#34; 完成安全设置后为 MariaDB 链接动态库\necho \u0026#34;/usr/local/mariadb/lib\u0026#34; \u0026gt; /etc/ld.so.conf.d/mariadb.conf ldconfig 安装 PHP 准备工作 在安装 PHP 之前，需要编译安装 libiconv\ncd /usr/local/src wget https://ftp.gnu.org/gnu/libiconv/libiconv-1.17.tar.gz tar zxf libiconv-1.17.tar.gz cd libiconv-1.17 ./configure make -j$(nproc) make install 链接动态库\necho \u0026#39;/usr/local/lib\u0026#39; \u0026gt; /etc/ld.so.conf.d/libc.conf ldconfig 源码编译安装 cd /usr/local/src wget https://secure.php.net/distributions/php-8.2.16.tar.gz tar zxf php-8.2.16.tar.gz cd php-8.2.16 mkdir build-php \u0026amp;\u0026amp; cd build-php ../configure --prefix=/usr/local/php \\ --with-config-file-path=/usr/local/php/etc \\ --with-config-file-scan-dir=/usr/local/php/etc/php.d \\ --with-fpm-user=caddy \\ --with-fpm-group=caddy \\ --with-mysqli=mysqlnd \\ --with-pdo-mysql=mysqlnd \\ --with-iconv=/usr/local/ \\ --with-freetype \\ --with-jpeg \\ --with-zlib \\ --with-password-argon2 \\ --with-sodium \\ --with-curl \\ --with-openssl \\ --with-mhash \\ --with-xsl \\ --with-gettext \\ --with-zip \\ --enable-fpm \\ --enable-opcache \\ --enable-mysqlnd \\ --enable-xml \\ --enable-bcmath \\ --enable-shmop \\ --enable-exif \\ --enable-sysvsem \\ --enable-mbregex \\ --enable-mbstring \\ --enable-gd \\ --enable-pcntl \\ --enable-sockets \\ --enable-ftp \\ --enable-intl \\ --enable-soap \\ --disable-fileinfo \\ --disable-rpath \\ --disable-debug make ZEND_EXTRA_LIBS=\u0026#39;-liconv\u0026#39; -j $(nproc) make install 为 PHP 添加环境变量\necho \u0026#34;export PATH=/usr/local/php/bin:\\$PATH\u0026#34; \u0026gt; /etc/profile.d/php.sh source /etc/profile 复制 php.ini 配置并进行修改\ncp /usr/local/src/php-8.2.16/php.ini-production /usr/local/php/etc/php.ini # 修改以下部分 memory_limit = output_buffering = On short_open_tag = On expose_php = Off equest_order = \u0026#34;CGP\u0026#34; date.timezone = Asia/Shanghai post_max_size = 100M upload_max_filesize = 50M max_execution_time = 600 realpath_cache_size = 2M disable_functions = passthru,exec,system,chroot,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_restore,dl,readlink,symlink,popepassthru,stream_socket_server,fsocket,popen 其中 memory_limit 项参数如下：\n# 内存小于 640M memory_limit = 64 # 内存为 640M - 1280M memory_limit = 128 # 内存为 1280M - 2500M memory_limit = 192 # 内存为 2500M - 3500M memory_limit = 256 # 内存为 3500M - 4500M memory_limit = 320 # 内存为 4500M - 8000M memory_limit = 384 #内存大于 8000M memory_limit = 448 接下来为 PHP 开启 OPcache 缓存并进行配置\ncat \u0026gt; /usr/local/php/etc/php.d/opcache.ini \u0026lt;\u0026lt; EOF [opcache] zend_extension=opcache.so opcache.enable=1 opcache.enable_cli=1 opcache.memory_consumption= opcache.interned_strings_buffer=8 opcache.max_accelerated_files=100000 opcache.max_wasted_percentage=5 opcache.use_cwd=1 opcache.validate_timestamps=1 opcache.revalidate_freq=60 ;opcache.save_comments=0 opcache.consistency_checks=0 ;opcache.optimization_level=0 EOF 其中 opcache.memory_consumption= 项，与上文 php.ini 中 memory_limit 一致\n添加 php-fpm 启动脚本，并设置开机自启\ncat \u0026gt; /usr/lib/systemd/system/php-fpm.service \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; [Unit] Description=The PHP FastCGI Process Manager Documentation=http://php.net/docs.php After=network.target [Service] Type=simple PIDFile=/usr/local/php/var/run/php-fpm.pid ExecStart=/usr/local/php/sbin/php-fpm --nodaemonize --fpm-config usr/local/php/etc/php-fpm.conf ExecReload=/bin/kill -USR2 $MAINPID LimitNOFILE=1000000 LimitNPROC=1000000 LimitCORE=1000000 [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable php-fpm 接着还需要添加 php-fpm 配置文件，并进行配置\ncat \u0026gt; /usr/local/php/etc/php-fpm.conf \u0026lt;\u0026lt; EOF ;;;;;;;;;;;;;;;;;;;;; ; FPM Configuration ; ;;;;;;;;;;;;;;;;;;;;; ;;;;;;;;;;;;;;;;;; ; Global Options ; ;;;;;;;;;;;;;;;;;; [global] pid = run/php-fpm.pid error_log = log/php-fpm.log log_level = warning emergency_restart_threshold = 30 emergency_restart_interval = 60s process_control_timeout = 5s daemonize = yes ;;;;;;;;;;;;;;;;;;;; ; Pool Definitions ; ;;;;;;;;;;;;;;;;;;;; [caddy] listen = /dev/shm/php-cgi.sock listen.backlog = -1 listen.allowed_clients = 127.0.0.1 listen.owner = caddy listen.group = caddy listen.mode = 0666 user = caddy group = caddy pm = dynamic pm.max_children = 12 pm.start_servers = 8 pm.min_spare_servers = 6 pm.max_spare_servers = 12 pm.max_requests = 2048 pm.process_idle_timeout = 10s request_terminate_timeout = 120 request_slowlog_timeout = 0 pm.status_path = /php-fpm_status slowlog = var/log/slow.log rlimit_files = 51200 rlimit_core = 0 catch_workers_output = yes ;env[HOSTNAME] = $HOSTNAME env[PATH] = /usr/local/bin:/usr/bin:/bin env[TMP] = /tmp env[TMPDIR] = /tmp env[TEMP] = /tmp EOF 进行如下修改：\n# 内存小于 3000M pm.max_children = 内存（单位：M） /3/20 pm.start_servers = 内存（单位：M） /3/30 pm.min_spare_servers = 内存（单位：M） /3/40 pm.max_spare_servers = 内存（单位：M） /3/20 # 内存为 3000M - 4500M pm.max_children = 50 pm.start_servers = 30 pm.min_spare_servers = 20 pm.max_spare_servers = 50 # 内存为 4500M - 6500M pm.max_children = 60 pm.start_servers = 40 pm.min_spare_servers = 30 pm.max_spare_servers = 60 # 内存为 6500M - 8500M pm.max_children = 70 pm.start_servers = 50 pm.min_spare_servers = 40 pm.max_spare_servers = 70 # 内存大于 8500M pm.max_children = 80 pm.start_servers = 60 pm.min_spare_servers = 50 pm.max_spare_servers = 80 安装PHP 扩展 Redis 扩展 下载 Redis Server 和 PECL Redis\ncd /usr/local/src wget https://github.com/redis/redis/archive/7.2.4.tar.gz wget https://pecl.php.net/get/redis-6.0.2.tgz 编译安装 Redis Srever\nmkdir -p /usr/local/redis/{etc,var} cd /usr/local/src tar zxf 7.2.4.tar.gz cd redis-7.2.4 make -j$(nproc) make PREFIX=/usr/local/redis install 将 bin 目录下可执行文件进行链接并配置 redis\nln -s /usr/local/redis/bin/* /usr/local/bin/ cp /usr/local/src/redis-7.2.4/redis.conf /usr/local/redis/etc/ vim /usr/local/redis/etc/redis.conf # 改成如下 pidfile /var/run/redis/redis.pid logfile /usr/local/redis/var/redis.log dir /usr/local/redis/var daemonize yes bind 127.0.0.1 ::1 # maxmemory 计算方法：内存（单位：M）/8*1000000 maxmemory 512000000 添加用户、组 并设置文件夹权限\ngroupadd redis useradd -g redis -M -s /usr/sbin/nologin redis chown -R redis:redis /usr/local/redis/{var,etc} 添加 Redis Server 启动脚本，并设置开机自启\ncat \u0026gt; /usr/lib/systemd/system/redis-server.service \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; [Unit] Description=Redis In-Memory Data Store After=network.target [Service] Type=forking PIDFile=/var/run/redis/redis.pid User=redis Group=redis Environment=statedir=/var/run/redis PermissionsStartOnly=true ExecStartPre=/bin/mkdir -p ${statedir} ExecStartPre=/bin/chown -R redis:redis ${statedir} ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf ExecStop=/bin/kill -s TERM $MAINPID Restart=always LimitNOFILE=1000000 LimitNPROC=1000000 LimitCORE=1000000 [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable redis-server systemctl start redis-server 接着安装 PECL Redis 并为 PHP 开启 PECL Redis 扩展\ncd /usr/local/src tar zxf redis-6.0.2.tgz cd redis-6.0.2 /usr/local/php/bin/phpize ./configure --with-php-config=/usr/local/php/bin/php-config make -j$(nproc) make install echo \u0026#39;extension=redis.so\u0026#39; \u0026gt; /usr/local/php/etc/php.d/redis.ini Memcached 扩展 首先需要下载 Memcached、libMemcached 和 PECL Memcached\ncd /usr/local/src wget https://memcached.org/files/memcached-1.6.24.tar.gz wget https://launchpad.net/libmemcached/1.0/1.0.18/+download/libmemcached-1.0.18.tar.gz wget https://pecl.php.net/get/memcached-3.2.0.tgz 开始编译安装 Memcached\n# 添加用户、组 groupadd memcached useradd -g memcached -M -s /usr/sbin/nologin memcached cd /usr/local/src tar zxf memcached-1.6.24.tar.gz cd memcached-1.6.24 ./configure --prefix=/usr/local/memcached make -j$(nproc) make install # 链接可执行文件 ln -s /usr/local/memcached/bin/memcached /usr/bin/memcached 添加 Memcached 启动脚本，并设置开机自启\ncat \u0026gt; /usr/lib/systemd/system/memcached.service \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; [Unit] Description=memcached daemon After=network.target [Service] Environment=PORT=11211 Environment=USER=memcached Environment=MAXCONN=1024 Environment=CACHESIZE=256 Environment=\u0026#34;OPTIONS=-l 127.0.0.1\u0026#34; ExecStart=/usr/bin/memcached -p ${PORT} -u ${USER} -m ${CACHESIZE} -c ${MAXCONN} $OPTIONS PrivateTmp=true ProtectSystem=full NoNewPrivileges=true PrivateDevices=true CapabilityBoundingSet=CAP_SETGID CAP_SETUID CAP_SYS_RESOURCE RestrictAddressFamilies=AF_INET AF_INET6 AF_UNIX [Install] WantedBy=multi-user.target EOF systemctl daemon-reload systemctl enable memcached systemctl start memcached 在编译安装之前先给 libMencached 打个补丁\ncd /usr/local/src tar zxf libmemcached-1.0.18.tar.gz cat \u0026gt; libmemcached-build.patch \u0026lt;\u0026lt; \u0026#39;EOF\u0026#39; diff -up ./clients/memflush.cc.old ./clients/memflush.cc --- ./clients/memflush.cc.old\t2017-02-12 10:12:59.615209225 +0100 +++ ./clients/memflush.cc\t2017-02-12 10:13:39.998382783 +0100 @@ -39,7 +39,7 @@ int main(int argc, char *argv[]) { options_parse(argc, argv); - if (opt_servers == false) + if (!opt_servers) { char *temp; @@ -48,7 +48,7 @@ int main(int argc, char *argv[]) opt_servers= strdup(temp); } - if (opt_servers == false) + if (!opt_servers) { std::cerr \u0026lt;\u0026lt; \u0026#34;No Servers provided\u0026#34; \u0026lt;\u0026lt; std::endl; exit(EXIT_FAILURE); EOF patch -d libmemcached-1.0.18 -p0 \u0026lt; libmemcached-build.patch 然后编译安装 libMencached\ncd libmemcached-1.0.18 sed -i \u0026#34;s@lthread -pthread -pthreads@lthread -lpthread -pthreads@\u0026#34; ./configure ./configure --with-memcached=/usr/local/memcached make -j$(nproc) make install 接下来编译安装 PECL Memcached 并为 PHP 开启 Memcached 扩展\ncd /usr/local/src tar zxf memcached-3.2.0.tgz cd memcached-3.2.0 /usr/local/php/bin/phpize ./configure --with-php-config=/usr/local/php/bin/php-config make -j$(nproc) make install cat \u0026gt; /usr/local/php/etc/php.d/memcached.ini \u0026lt;\u0026lt; EOF extension=memcached.so memcached.use_sasl=1 EOF Imagick 扩展 下载 Imagemagick 和 PECL Imagick\ncd /usr/local/src wget https://imagemagick.org/archive/ImageMagick.tar.gz wget https://pecl.php.net/get/imagick-3.7.0.tgz 编译安装 Imagemagick\ncd /usr/local/src tar zxf ImageMagick.tar.gz cd ImageMagick-7.1.1-29 ./configure --prefix=/usr/local/imagemagick \\ --enable-shared \\ --enable-static make -j$(nproc) make install 编译安装 PECL Imagick 并为 PHP 开启 Imagick 扩展\ncd /usr/local/src tar zxf imagick-3.7.0.tgz cd imagick-3.7.0 /usr/local/php/bin/phpize ./configure --with-php-config=/usr/local/php/bin/php-config \\ --with-imagick=/usr/local/imagemagick make -j$(nproc) make install echo \u0026#39;extension=imagick.so\u0026#39; \u0026gt; /usr/local/php/etc/php.d/imagick.ini 至此 Caddy2 + MariaDB + PHP 安装完成\n另外需要注意网站根目录权限，网站根目录权限应遵循： 文件 644 文件夹 755 权限用户和用户组 caddy ，其余文档 777 权限是不正常的 如出现文件权限问题时，请执行下面 3 条命令：\nchown -R caddy:caddy /data/www/ find /data/www/ -type d -exec chmod 755 {} \\; find /data/www/ -type f -exec chmod 644 {} \\; ","date":"2023-10-20T22:24:35+08:00","permalink":"/archives/install_lcmp/","title":"Debian 下手动安装 LCMP 环境"},{"content":"前言 Cloudreve 可以让您快速搭建起公私兼备的网盘系统。Cloudreve 在底层支持不同的云存储平台，用户在实际使用时无须关心物理存储方式。你可以使用 Cloudreve 搭建个人用网盘、文件分享系统，亦或是针对大小团体的公有云系统。\n安装配置 获取 Cloudreve 项目地址：Github 项目地址 你可以在 GitHub Release 页面获取已经构建打包完成的主程序。其中每个版本都提供了常见系统架构下可用的主程序，命名规则为cloudreve_版本号_操作系统_CPU架构.tar.gz 。比如，普通 64 位 Linux 系统上部署 3.0.0 版本，则应该下载cloudreve_3.0.0_linux_amd64.tar.gz。\n安装启动 通过上一步获取 Cloudreve 下载地址后，即可下载至本地并启动(我这里最新版本是3.6.2)：\n#创建文件夹 mkdir -p /usr/local/cloudreve cd /usr/local/cloudreve #下载程序 wget https://github.com/cloudreve/Cloudreve/releases/download/3.6.2/cloudreve_3.6.2_linux_amd64.tar.gz #解压程序 tar zxvf cloudreve_3.6.2_linux_amd64.tar.gz #赋予执行权限 chmod +x ./cloudreve #启动 Cloudreve ./cloudreve Cloudreve 在首次启动时，会创建初始管理员账号，请注意保管管理员密码，此密码只会在首次启动时出现。如果您忘记初始管理员密码，需要删除同级目录下的 cloudreve.db，重新启动主程序以初始化新的管理员账户。\nCloudreve 默认会监听 5212 端口。你可以在浏览器中访问 http://IP:5212 进入 Cloudreve。\n以上步骤操作完后，最简单的部署就完成了。你可能需要一些更为具体的配置，才能让 Cloudreve 更好的工作，具体流程请参考下面的配置流程。\n反向代理 在自用或者小规模使用的场景下，你完全可以使用 Cloudreve 内置的 Web 服务器。但是如果你需要使用 HTTPS，亦或是需要与服务器上其他 Web 服务共存时，你可能需要使用主流 Web 服务器反向代理 Cloudreve ，以获得更丰富的扩展功能。\n你需要在 Web 服务器中新建一个虚拟主机，完成所需的各项配置（如启用 HTTPS），然后在网站配置文件中加入反代规则：\nNginx 配置 在网站的 server 字段中加入：\nlocation / { proxy_pass http://127.0.0.1:5212; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-NginX-Proxy true; proxy_redirect off; # 如果您要使用本地存储策略，请将下一行注释符删除，并更改大小为理论最大文件尺寸 # client_max_body_size 20000m; } Apache 配置 在 VirtualHost 字段下加入反代配置项 ProxyPass，比如：\n\u0026lt;VirtualHost *:80\u0026gt; ServerName myapp.example.com ServerAdmin webmaster@example.com DocumentRoot /www/myapp/public # 以下为关键部分 AllowEncodedSlashes NoDecode ProxyPass \u0026#34;/\u0026#34; \u0026#34;http://127.0.0.1:5212/\u0026#34; nocanon \u0026lt;/VirtualHost\u0026gt; Caddy 配置 在网站配置中加入：\ndomain.com { reverse_proxy 127.0.0.1:5212 { header_up Host {host} header_up X-Real-IP {remote} header_up X-Forwarded-For {remote} header_up X-Forwarded-Proto https } } 后台运行 这里依旧使用 Systemd 大法：\n创建编辑配置文件：\nvim /usr/lib/systemd/system/cloudreve.service 将下面的 PATH_TO_CLOUDREVE 换成程序所在目录：\n[Unit] Description=Cloudreve After=network.target After=mysqld.service Wants=network.target [Service] WorkingDirectory=/path/to/cloudreve ExecStart=/path/to/cloudreve/cloudreve Restart=on-abnormal RestartSec=5s KillMode=mixed StandardOutput=null StandardError=syslog [Install] WantedBy=multi-user.target 管理命令：\n# 更新配置 systemctl daemon-reload # 启动服务 systemctl start cloudreve # 设置开机启动 systemctl enable cloudreve # 停止服务 systemctl stop cloudreve # 重启服务 systemctl restart cloudreve # 查看状态 systemctl status cloudreve 扩展配置 默认情况下，Cloudreve 会使用内置的 SQLite 数据库，并在同级目录创建数据库文件cloudreve.db，如果您想要使用 MySQL，可以按照以下步骤配置，并重启 Cloudreve。注意，Cloudreve 只支持大于或等于 5.7 版本的 MySQL 。\n创建配置文件 vim /usr/local/cloudreve/conf.ini 加入如下配置，并进行修改：\n[System] # 运行模式 Mode = master # 监听端口 Listen = :5212 # 是否开启 Debug Debug = false # Session 密钥, 一般在首次启动时自动生成 SessionSecret = 23333 # Hash 加盐, 一般在首次启动时自动生成 HashIDSalt = something really hard to guss # 数据库相关 [Database] # 数据库类型，目前支持 sqlite/mysql/mssql/postgres Type = mysql # MySQL 端口 Port = 3306 # 用户名 User = root # 密码 Password = password # 数据库地址 Host = 127.0.0.1 # 数据库名称 Name = root # 数据表前缀 TablePrefix = cd_ # 字符集 Charset = utf8mb4 # 进程退出前安全关闭数据库连接的缓冲时间 GracePeriod = 30 设置完成后将 Systemd 文件修改如下：\n[Unit] Description=Cloudreve After=network.target After=mysqld.service Wants=network.target [Service] WorkingDirectory=/path/to/cloudreve ExecStart=/path/to/cloudreve/cloudreve -c /path/to/conf.ini Restart=on-abnormal RestartSec=5s KillMode=mixed StandardOutput=null StandardError=syslog [Install] WantedBy=multi-user.target 其中 /path/to/conf.ini 为配置文件所在位置，path/to/cloudreve 为 Cloudreve 程序所在目录\n我这里是 /usr/local/cloudreve/conf.ini 和 usr/local/cloudreve\n然后更新配置并启动服务：\nsystemctl daemon-reload systemctl start cloudreve ","date":"2023-01-02T13:21:30+08:00","permalink":"/archives/cloudreve/","title":"使用 Cloudreve 搭建文件管理"},{"content":"前言 介绍 Aria2 是目前最强大的全能型下载工具，它支持 BT、磁力、HTTP、FTP 等下载协议，常用做离线下载的服务端。\nAriaNg 是一个让 Aria2 更容易使用的现代 Web 前端。 AriaNg 使用纯 html \u0026amp; javascript 开发，所以其不需要任何编译器或运行环境.。您只要将 AriaNg 放在您的 Web 服务器里并在浏览器中打开即可使用；AriaNg 使用响应式布局，支持各种计算机或移动设备。\n特性 Aria2 BT 下载率高、速度快\n重启后不丢失任务进度、不重复下载\n删除正在下载的任务自动删除未完成的文件\n下载错误自动删除未完成的文件\n下载完成自动删除控制文件(.aria2后缀名文件)\n下载完成自动删除种子文件(.torrent后缀名文件)\n下载完成自动删除空目录\nBT 下载完成自动清除垃圾文件(文件类型过滤功能)\nBT 下载完成自动清除小文件(文件大小过滤功能)\n有一定的防版权投诉、防迅雷吸血效果\n更好的 PT 下载支持\nAriaNG 纯 Html \u0026amp; Javascript 实现, 不依赖任何运行时\n响应式布局设计, 兼容计算机与移动设备\n友好的界面交互\n任务排序 (按文件名, 文件大小, 进度, 剩余时间, 下载速度等.), 文件排序, Bittorrent 连接节点排序\n任务搜索\n任务重试\n拖拽调整任务顺序\n更详细的任务信息 (健康度, 连接节点客户端信息等.)\n根据特定文件类型或文件扩展名筛选文件 (视频, 音频, 图片, 文档, 应用程序, 存档文件等.)\n多目录任务支持树形结构显示\nAria2 及单个任务的下载/上传速度图表\n完整支持 Aria2 设置选项\n深色主题\n支持网页地址命令行 API\n下载完成消息通知\n多语言支持\n支持配置多个 aria2 RPC\n支持导出和导入设置\n节省带宽, 仅请求增量数据\n安装配置 Aria2 安装配置 这里使用的一键安装管理脚本增强版；Github 项目地址 输入命令进行下载、运行脚本：\nwget -N git.io/aria2.sh \u0026amp;\u0026amp; chmod +x aria2.sh ./aria2.sh 运行脚本后，会进入管理面板：\nAria2 一键安装管理脚本 增强版 [v2.7.4] by P3TERX.COM 0. 升级脚本 —————————————————————— 1. 安装 Aria2 2. 更新 Aria2 3. 卸载 Aria2 —————————————————————— 4. 启动 Aria2 5. 停止 Aria2 6. 重启 Aria2 —————————————————————— 7. 修改 配置 8. 查看 配置 9. 查看 日志 10. 清空 日志 —————————————————————— 11. 手动更新 BT-Tracker 12. 自动更新 BT-Tracker —————————————————————— Aria2 状态: 已安装 | 已启动 自动更新 BT-Tracker: 已开启 请输入数字 [0-12]: 输入 1 进行安装，安装完成之后会跳出配置信息：\n你可以通过执行 ./aria2.sh 然后输入 7 回车修改配置；记录下配置信息，然后继续进行下一步。\nAriaNG 安装配置 项目地址：Github 项目地址 首先创建一个网站，可以参考 Oneinstack 创建虚拟主机 或 Caddy 创建站点 然后打开 下载版本 页面，将 AriaNG-x.x.x.zip 文件下载上传至网站根目录，并解压。\n访问该网站域名，首次访问会跳出认证错误提示，关闭掉然后进行设置：\n点击 AriaNG设置 - RPC 然后将之前记录好的 Aria 配置信息中的 IPV4 地址、端口 填入 Aria2 RPC 地址 然后填入 Aria2 RPC 密钥；并点击 重新加载 AriaNG\n配置完成重载后即可进行离线下载。\n扩展设置 如果你不想通过 http://127.0.0.1:6800 进行连接 Aria2，那么可以进行反代，通过域名连接：\n修改 AriaNG 网站配置，添加下面的配置：\nNginx location = /jsonrpc { proxy_pass http://127.0.0.1:6800; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-NginX-Proxy true; } Caddy domain.com { reverse_proxy /jsonrpc 127.0.0.1:6800 { header_up Host {host} header_up X-Real-IP {remote} header_up X-Forwarded-For {remote} header_up X-Forwarded-Proto https } } 然后在 AriaNG 中修改 Aria2 RPC 地址为：https://domian.com:443/jsonrpc\n","date":"2022-12-24T10:58:22+08:00","permalink":"/archives/aria/","title":"使用 Aria2 + AriaNG 搭建离线下载站"},{"content":"前言 File Browser 是一款使用 Golang 开发的文件管理器，跨平台，免费开源，功能强大。它是一个能独立运行的可执行二进制文件，可以与 Docker 或 Caddy 一起使用。这篇文章分享 Debian 11 下安装 File Browser 的过程。\n安装配置 安装 File Browser 项目地址： Github 项目地址 通过以下命令进行安装：\ncurl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash 安装位置： /usr/local/bin/filebrowser\n配置 File Browser 首先创建目录用于放置配置数据：\n# 创建目录 mkdir /usr/local/lib/filebrowser # 创建配置数据库 filebrowser -d /usr/local/lib/filebrowser/filebrowser.db config init 设置监听地址：\nfilebrowser -d /usr/local/lib/filebrowser/filebrowser.db config set -a 0.0.0.0 设置监听端口：\nfilebrowser -d /usr/local/lib/filebrowser/filebrowser.db config set -p 8080 设置根目录：\nfilebrowser -d /usr/local/lib/filebrowser/filebrowser.db config set -r /var/filebrowser 设置日志位置：\nfilebrowser -d /usr/local/lib/filebrowser/filebrowser.db config set --log /var/log/filebrowser.log 设置语言环境：\nfilebrowser -d /usr/local/lib/filebrowser/filebrowser.db config set --locale zh-cn 添加用户：\nfilebrowser -d /usr/local/lib/filebrowser/filebrowser.db users add user password --perm.admin --locale zh-cn 其中的 user 与 password 为用户名和密码\n或者直接一步到位：\nfilebrowser -d /usr/local/lib/filebrowser/filebrowser.db config set -a 0.0.0.0 -p 8080 -r /var/filebrowser --log /var/log/filebrowser.log --locale zh-cn 试运行：\nfilebrowser -d /usr/local/lib/filebrowser/filebrowser.db 之后即可通过 http://ip:8080 进行访问\n后台运行及反向代理 后台运行 后台运行可通过 Systemd 大法：\n创建 filebrowser.service 然后进行编辑：\nvim /usr/lib/systemd/system/filebrowser.service 复制下面文件并粘贴：\n[Unit] Description=File Browser After=network.target [Service] Type=simple ExecStart=/path/to/filebrowser -d /path/to/filebrowser.db Restart=always [Install] WantedBy=multi-user.target 其中，/path/to/filebrowser 为 filebrowser 安装位置，可通过 which filebrowser 查询；/path/to/filebrowser.db 为 filebrowser 配置数据库位置。\n管理命令：\n# 更新配置 systemctl daemon-reload # 启动服务 systemctl start filebrowser # 设置开机启动 systemctl enable filebrowser ​ # 停止服务 systemctl stop filebrowser ​ # 重启服务 systemctl restart filebrowser ​ # 查看状态 systemctl status filebrowser 反代设置 如果不想通过 IP 地址访问，可以设置反向代理通过网址访问：\nNginx 设置： location ^~ / { proxy_pass http://127.0.0.1:8080; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-NginX-Proxy true; proxy_redirect off; client_max_body_size 10240m; } Caddy 设置： domain.com { log { output file /var/log/caddy/filebrowser.log level error } root * /var/filebrowser header { Strict-Transport-Security max-age=31536000;preload X-Content-Type-Options nosniff X-Frame-Options SAMEORIGIN } encode gzip reverse_proxy 127.0.0.1:8080 { header_up Host {host} header_up X-Real-IP {remote} header_up X-Forwarded-For {remote} header_up X-Forwarded-Proto https } file_server tls user@email.com } 配置完成后即可通过域名进行访问。\n扩展设置 如果你想要通过 https://domian.com/pan 进行访问，那么需要设置 baseurl :\nfilebrowser -d /usr/local/lib/filebrowser/filebrowser.db config set -b /pan 然后进行反代：\nNgxin： location ~* /pan { proxy_pass http://127.0.0.1:8080; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-NginX-Proxy true; proxy_redirect off; client_max_body_size 10240m; } Caddy: domain.com { reverse_proxy /pan/* 127.0.0.1:8080 { header_up Host {host} header_up X-Real-IP {remote} header_up X-Forwarded-For {remote} header_up X-Forwarded-Proto https } } ","date":"2022-12-16T20:09:22+08:00","permalink":"/archives/filebrowser/","title":"File Browser 在线文件管理"},{"content":"前言 前两天折腾手上的 CentOS7 服务器，在编译安装软件时发现编译失败；查看了下日志和文档发现是因为 gcc 和 g++ 版本过低了。而通过 yum 查找发现只有 4.8 版本，于是决定通过编译安装新版本，历经了重重困难后终于是安装完毕，并在此进行记录。\n安装步骤 准备工作 首先安装任意版本 gcc 和一些需要的软件： yum update yum install -y gcc gcc-c++ m4 bzip2 screen 下载 gcc 源码 通过 官方仓库 下载或 镜像地址 寻找服务器就近地址；找到需要安装的版本下载并解压，我这里选的 9.5.0：\nmkdir /opt/gcc cd /opt/gcc wget https://gcc.gnu.org/pub/gcc/releases/gcc-9.5.0/gcc-9.5.0.tar.gz tar zxvf gcc-9.5.0.tar.gz 下载依赖库 gcc 官网提供了依赖库下载地址，但是一个个下载比较麻烦，可以通过 gcc 源码自带的 download_prerequisites 文件；它可以自动下载关联的依赖库并且放置到 gcc 目录下，与 gcc 一起编译：\ncd gcc-9.5.0 ./contrib/download_prerequisites 执行后会自动下载依赖库并解压至当前目录下。\n编译安装 完成上述操作后即可开始编译安装 gcc 了，首先进行 configure 配置与检查：\nmkdir build \u0026amp;\u0026amp; cd build ../configure --prefix=/usr/local/gcc --enable-threads=posix --disable-checking --disable-multilib --enable-languages=c,c++ # 输出 ...... ...... configure: creating ./config.status config.status: creating Makefile 检查完毕生成 MakeFile 文件后，就可以进行编译安装了，时间比较长；为了防止网络等因素导致断连，可以创建一个窗口然后进行编译安装：\nscreen -S gcc make \u0026amp;\u0026amp; make install 这里可以通过 make -j 设置线程数来提升编译速度，如果不清楚该设置多少，可以通过 make -j$(nproc) 自动计算线程数：\nmake -j$(nproc) \u0026amp;\u0026amp; make install 版本替换 卸载旧版本 yum remove -y gcc gcc-c++ 链接新版本 ln -s /usr/local/gcc/bin/c++ /usr/bin/c++ ln -s /usr/local/gcc/bin/gcc /usr/bin/cc ln -s /usr/local/gcc/bin/g++ /usr/bin/g++ ln -s /usr/local/gcc/bin/gcc /usr/bin/gcc 添加环境变量、更新动态库 vim ~/.bashrc 修改 ~/.bashrc 文件，在最后添加：\nexport PATH=/usr/local/gcc/bin:$PATH export CPATH=/usr/local/gcc/include:$CPATH export LD_LIBRARY_PATH=/usr/local/gcc/lib:/usr/local/gcc/lib64:$LD_LIBRARY_PATH 其中 /usr/local/gcc 为 gcc 安装目录\n然后刷新一下变量环境：\nsource ~/.bashrc 添加完毕，接下来更新动态库，首先查找一下动态库：\nfind / -name \u0026#34;libstdc++.so*\u0026#34; 输出结果：\n/usr/lib64/libstdc++.so.6 /usr/lib64/libstdc++.so.6.0.19 /usr/share/gdb/auto-load/usr/lib64/libstdc++.so.6.0.19-gdb.py /usr/share/gdb/auto-load/usr/lib64/libstdc++.so.6.0.19-gdb.pyc /usr/share/gdb/auto-load/usr/lib64/libstdc++.so.6.0.19-gdb.pyo /usr/local/src/gcc-9.5.0/build/x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.28 /usr/local/src/gcc-9.5.0/build/x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6 /usr/local/src/gcc-9.5.0/build/prev-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.28 /usr/local/src/gcc-9.5.0/build/prev-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6 /usr/local/src/gcc-9.5.0/build/stage1-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.28 /usr/local/src/gcc-9.5.0/build/stage1-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6 /usr/local/gcc/lib64/libstdc++.so.6.0.28 /usr/local/gcc/lib64/libstdc++.so.6 /usr/local/gcc/lib64/libstdc++.so /usr/local/gcc/lib64/libstdc++.so.6.0.28-gdb.py 可以看到现在老版本是 6.0.19 而 libstdc++.so.6 则是 libstdc++.so.6.0.19 的软链接：\nls -l /usr/lib64/libstdc++.so.6 # 输出 lrwxrwxrwx. 1 root root 30 Dec 10 06:50 /usr/lib64/libstdc++.so.6 -\u0026gt; /usr/lib64/libstdc++.so.6.0.19 然后将 gcc 中的动态库复制过去，删除旧版本链接并重新链接新版本：\ncp /usr/local/gcc/lib64/libstdc++.so.6.0.28 /usr/lib64/ rm -f /usr/lib64/libstdc++.so.6 ln -s /usr/lib64/libstdc++.so.6.0.28 /usr/lib64/libstdc++.so.6 更新完毕，接下来就可以正常使用了。\n添加忽略（可选） 为防止误操作或运行自动化脚本情况导致被覆盖，可以将 cmake 添加忽略，编辑 /etc/yum.conf\nvim /etc/yum.conf 在末尾添加上：\nexclude=gcc* 另外需要注意运行自动化脚本前查看一下是否会对配置文件进行编辑，若存在则需要修改脚本。\n","date":"2022-12-10T15:43:06+08:00","permalink":"/archives/make_gcc/","title":"CentOS 7 编译安装 gcc"},{"content":"前言 VPS 主机一键自动重装系统脚本优化版，DD 过程简单，傻瓜式安装。 脚本支持原版自定义密码安装，可选 Linux 和 Windows 系统，而且脚本支持 Oracle 甲骨文免费云主机使用支持 UEFI 的镜像包安装。\n一键 DD 脚本，支持性好，更智能更全面，支持国内外各种 VPS 重装，特别是对国内各种访问国外资源慢的 VPS 安装有奇效。\nGithub 项目地址 安装过程 准备工作 为防止异常，先执行以下命令：\nDebian/Ubuntu: apt update -y \u0026amp;\u0026amp; apt dist-upgrade -y RedHat/CentOS: yum makecache \u0026amp;\u0026amp; yum update -y 安装重装系统的前提组件:\nDebian/Ubuntu: apt-get install -y xz-utils openssl gawk file wget screen \u0026amp;\u0026amp; screen -S os RedHat/CentOS: yum install -y xz openssl gawk file glibc-common wget screen \u0026amp;\u0026amp; screen -S os 一键 DD 执行命令：\nwget --no-check-certificate -O NewReinstall.sh https://git.io/newbetags \u0026amp;\u0026amp; chmod a+x NewReinstall.sh \u0026amp;\u0026amp; bash NewReinstall.sh 如为CN主机(部分主机商已不能使用)，可能出现报错或不能下载脚本的问题，可执行以下命令开始安装：\nwget --no-check-certificate -O NewReinstall.sh https://cdn.jsdelivr.net/gh/fcurrk/reinstall@master/NewReinstall.sh \u0026amp;\u0026amp; chmod a+x NewReinstall.sh \u0026amp;\u0026amp; bash NewReinstall.sh 运行后，会获取公网 IP、网关和子网掩码，确认一致后，按下 Y 回车下一步：\n公网 IP 、网关及子网掩码可在 VPS 控制面板进行查看，若不一致，可输入 N 进行自定义\n然后进行系统选择，41合1的系统一键 DD 选择界面，输入 99 则使用自定义镜像：\n若输入 9-16 安装原版系统，可自定义密码，密码要求8-16位，以英文字母或数字开头，可以是大小写英文字母、数字及7个特殊字符.!$@#\u0026amp;%的任意组合，然后设置端口确认信息后，即可进行安装：\n注意\n谷歌云原版系统基础上 DD 会出现自动获取的子网掩码为255.255.255.255，如出现这种情况需要手工输入改正为正确的如255.255.255.0，否则会安装完成主机可能会离线。\n阿里云因使用了特殊的驱动，DD 安装 Windows 系统选择阿里云专用版。\nOracle Cloud（甲骨文云）可选择支持 UEFI 的镜像，注意基础系统最好选择 Ubuntu，如原系统是 CentOS 可能无法成功，注意如是 ARM 机器注意选择同时支持 ARM64 和 UEFI 的镜像。\n41合一系统密码：\n1、CentOS 7.7 (已关闭防火墙及 SELinux，默认密码 Pwd@CentOS) 2、CentOS 7 (默认密码 cxthhhhh.com) 3、CentOS 7 (支持 ARM64、UEFI，默认密码 cxthhhhh.com) 4、CentOS 8 (默认密码 cxthhhhh.com) 5、Rocky 8 (默认密码 cxthhhhh.com) 6、Rocky 8 (支持 UEFI，默认密码 cxthhhhh.com) 7、Rocky 8 (支持 ARM64、UEFI，默认密码 cxthhhhh.com) 8、CentOS 9 (默认密码 cxthhhhh.com) 9、CentOS 6 (官方源原版，默认密码 Minijer.com) 10、Debian 11 (官方源原版，默认密码 Minijer.com) 11、Debian 10 (官方源原版，默认密码 Minijer.com) 12、Debian 9 (官方源原版，默认密码 Minijer.com) 13、Debian 8 (官方源原版，默认密码 Minijer.com) 14、Ubuntu 20.04 (官方源原版，默认密码 Minijer.com) 15、Ubuntu 18.04 (官方源原版，默认密码 Minijer.com) 16、Ubuntu 16.04 (官方源原版，默认密码 Minijer.com) 17、Windows Server 2022 (默认密码 cxthhhhh.com) 18、Windows Server 2022 (支持 UEFI，默认密码 cxthhhhh.com) 19、Windows Server 2019 (默认密码 cxthhhhh.com) 20、Windows Server 2016 (默认密码 cxthhhhh.com) 21、Windows Server 2012 (默认密码 cxthhhhh.com) 22、Windows Server 2008 (默认密码 cxthhhhh.com) 23、Windows Server 2003 (默认密码 cxthhhhh.com) 24、Windows 10 LTSC (默认密码 Teddysun.com) 25、Windows 10 LTSC (支持 UEFI，默认密码 Teddysun.com) 26、Windows 7 x86 Lite (默认密码 nat.ee) 27、Windows 7 x86 Lite (阿里云专用，默认密码 nat.ee) 28、Windows 7 x64 Lite (默认密码 nat.ee) 29、Windows 7 x64 Lite (支持 UEFI，默认密码 nat.ee) 30、Windows 10 LTSC Lite (默认密码 nat.ee) 31、Windows 10 LTSC Lite (阿里云专用，默认密码 nat.ee) 32、Windows 10 LTSC Lite (支持 UEFI，默认密码 nat.ee) 33、Windows Server 2003 Lite (C 盘默认10G，默认密码 WinSrv2003x86-Chinese) 34、Windows Server 2008 Lite (默认密码 nat.ee) 35、Windows Server 2008 Lite (支持 UEFI，默认密码 nat.ee) 36、Windows Server 2012 Lite (默认密码 nat.ee) 37、Windows Server 2012 Lite (支持 UEFI，默认密码nat.ee) 38、Windows Server 2016 Lite (默认密码 nat.ee) 39、Windows Server 2016 Lite (支持 UEFI，默认密码 nat.ee) 40、Windows Server 2022 Lite (默认密码 nat.ee) 41、Windows Server 2022 Lite (支持 UEFI，默认密码 nat.ee) 99、自定义镜像 注意事项 系统名称后带 Lite 的均为精简版，没有的是完整版\n[X64-Legacy-cxthhhhh] 代表系统为 AMD64 位，支持传统 BIOS 启动，cxthhhhh 定制的系统镜像\nARM64 代表系统支持 ARM64 位\nUEFI 代表系统支持最新的 UEFI 启动，如甲骨文全部都是这种\naliyun 代表阿里云专用系统镜像\ncxthhhhh、teddysun、nat.ee 均为三位制作系统镜像的大佬代称\n系统密码会在选择相应序号后提示，请注意记录\n系统安装过程会自动断开 SSH 连接，属于正常现象；等待安装完成后即可进行重连\n参考资料 一键 DD 脚本 Github 项目地址 一键 DD 脚本网址 ","date":"2022-12-01T10:53:36+08:00","permalink":"/archives/reinstall/","title":"一键 DD 自动重装脚本"},{"content":"前言 这两天闲着没事，将手头上闲置的一台 512M 小内存服务器拿出来折腾，编译安装 MariaDB 的时候由于内存不足导致编译失败。由于我是个小白，且一直是使用的 2/4G 服务器，以前从来没有注意过这个；直到现在遇到这样的问题。。。\nSwap 分区 别名：交换分区。 Swap 分区在系统的物理内存不够用的时候，把硬盘内存中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到 Swap 分区中，等到那些程序要运行时，再从 Swap 分区中恢复保存的数据到内存中。\n设置步骤 一般来说，很多服务器开通的时候就自带了 Swap 分区，在日常使用下并不需要对其进行额外的操作；但是有时候还是要视情况对 Swap 分区进行适当的增减；下面来看看 Swap 分区的设置 (这里我以我 4G 内存服务器作为演示，请根据实际情况修改数据) ：\n查看分区 通过 free -h 命令查看 free -h # 输出 total used free shared buff/cache available Mem: 3.6Gi 123Mi 3.3Gi 1.0Mi 182Mi 3.3Gi Swap: 0B 0B 0B 通过以上命令可以看到当前内存及 Swap 分区使用状态，如果 Swap 分区和我这里一样显示 0B 0B 0B 则代表并没有开启 Swap 分区。\n通过 swapon --show 命令查看 swapon --show 若开启了 Swap 分区，则会显示 Swap 分区状态；若没有开启 Swap 分区，则不会返回数据。\n创建分区 交换分区的大小分配 查找了一下资料，发现众说纷纭。。。最后决定采用如下方案：\n物理内存 建议 Swap 分区大小 \u0026lt; 4GB 2倍内存，不超过4G 4-8G 等于内存大小 8-64G 8G 64-256G 16G 创建交换分区 使用 fallocate 命令创建用于交换的文件 fallocate -l 4G /swapfile 如果报错可以使用 dd 命令：\ndd if=/dev/zero of=/swapfile bs=1M count=4096 设置权限 chmod 600 /swapfile 设置交换分区 mkswap /swapfile # 输出 Setting up swapspace version 1, size = 4 GiB (4294963200 bytes) no label, UUID=e3edf2fd-7259-4d00-98be-5afc604c1271 成功则返回如上信息。\n启用分区 swapon /swapfile 验证分区 swapon --show # 输出 NAME TYPE SIZE USED PRIO /swapfile file 4G 0B -2 开启成功则返回 Swap 分区状态\n开机启动及分配控制 设置开机启动 编辑 /etc/fstab 文件添加这一行： vim /etc/fstab # 添加如下: /swapfile swap swap defaults 0 0 或执行如下命令直接写入： echo \u0026#34;/swapfile swap swap defaults 0 0\u0026#34; \u0026gt;\u0026gt;/etc/fstab Swap 分区分配控制 Swappiness Swappiness 是一个 Linux 内核属性，用于定义系统使用交换空间的频率。 Swappiness 可以具有0到100之间的值。较低的值将使内核尽可能避免交换，而较高的值将使内核更积极地使用交换空间；默认的 swappiness 值为60.可以通过键入以下命令来检查当前的 swappiness 值：\ncat /proc/sys/vm/swappiness # 输出 60 对于桌面端，可以使用60的 swappiness 值；但对于生产服务器，可能需要设置较低的值，比如我设置为10：\n临时设置： sysctl vm.swappiness=10 要使之重启后保持不变，可以附加到 /etc/sysctl.conf 文件： vim /etc/sysctl.conf # 在最后添加如下 vm.swappiness=10 或者：\necho \u0026#34;vm.swappiness=10\u0026#34; \u0026gt;\u0026gt;/etc/sysctl.conf 删除及调整大小 如果需要对交换分区进行删除，可以按照下列步骤：\n停用交换分区 swapoff /swapfile 在 /etc/fstab 文件中删除交换文件条目： vim /etc/fstab # 删除或注释下面一行： /swapfile swap swap defaults 0 0 删除 swapfile 文件 rm /swapfile 若需要修改分区大小，可先停用交换分区，然后直接删除 swapfile 文件并重新创建。\n总结 以上就是本篇的全部内容，希望对大家有所帮助。\n对于 Linux，无论是多大内存，还是要设立 Swap 交换分区，这样有利于在内存耗尽时及时启用 Swap 空间。另外，可以视情况对 Swap 分区大小进行临时调整，比如我前文所说用 512M 内存服务器编译安装高版本 MariaDB ，那么我可以先将 Swap 分区临时设置为 2G ，编译安装完成后再调整。\n","date":"2022-11-11T19:15:56+08:00","permalink":"/archives/setswap/","title":"Linux 服务器设置 Swap 分区"},{"content":"前言 在之前的 Hugo 博客系列文章有提到过一些基本的 Git 配置和操作，一般来说我们写 Hugo 博客只需要配置全局账号以及单个仓库即可。但凡事皆有例外，如果你需要多个 Git 用户，或者说需要配置多个不同的仓库，那么应该怎么设置呢？现在我们就来看看。\n配置设置 多仓库设置 如果只使用单个 Github/Gitee 账户来管理多个仓库的话，只需要针对每个本地仓库设置远程仓库 Remote 即可。例如，我在 Github 上面有两个项目，一个名为 demo ，另一个名为 example ：\ndemo 仓库： mkdir /path/to/demo # 创建仓库文件夹 cd /path/to/demo # 进入该仓库目录 git init # 指定 git 仓库并初始化 git remote add origin git@github.com:user/demo.git # 添加远程仓库地址 example 仓库： mkdir /path/to/example # 创建仓库文件夹 cd /path/to/example # 进入该仓库目录 git init # 指定 git 仓库并初始化 git remote add origin git@github.com:user/example.git # 添加远程仓库地址 像这样单账户，多仓库的，只需要为每个仓库设置远程仓库 Remote 即可。\n多账户设置 如果你需要管理多个 Git 用户，应该怎么操作？继续看：\n创建密钥对 譬如，我有一个 Github 账号，一个 Gitee 账号，它们需要分开操作；首先打开 Git bash 进入 ~/.ssh 目录为它们分别创建密钥对：\n首先创建 Github 密钥对：\ncd ~/.ssh ssh-keygen -t rsa -C \u0026#34;email\u0026#34; -f \u0026#34;github\u0026#34; # email 更换为你的 Github 邮箱，-f 参数为文件名，可自行设置 cat github.pub # 查看公钥内容 复制公钥内容，然后打开 Gituhb 添加刚才生成的公钥到 SSH Key\n接着是 Gitee：\nssh-keygen -t rsa -C \u0026#34;email\u0026#34; -f \u0026#34;gitee\u0026#34; # email 更换为你的 Gitee 邮箱，-f 参数为文件名，可自行 cat gitee.pub # 查看公钥内容 同样，复制公钥内容，添加到 Gitee 的 SSH 公钥\n然后添加私钥并进行测试\nssh-add ~/.ssh/github ssh-add ~/.ssh/gitee ssh -T git@github.com ssh -T git@gitee.com 成功则会返回欢迎你的用户名信息。\n创建配置文件 创建完密钥对后，需要创建一个配置文件来分配私钥以及主机\nvim config # 或者直接用 VS Code 编辑 config 配置文件内容如下：\n# Github Host github.com HostName github.com User username # username改成你的 Github 用户名 IdentityFile ~/.ssh/github # 私钥位置 # Gitee Host gitee.com HostName gitee.com User username # username改成你的 Gitee 用户名 IdentityFile ~/.ssh/gitee # 私钥位置 用户及 Remote 配置 由于拥有多个 Git 用户，就不能使用全局配置了；而是应该对仓库进行单独的用户配置，所以要先取消全局用户设置：\ngit config --global unset user.name username git config --global unset user.email email 接着对本地仓库分别进行单独配置，假定我 Github 项目的本地仓库文件夹为 github ：\ncd /path/to/github # 进入仓库目录 git config --local user.name username # 为该仓库设置用户 git config --local user.email email # 为该仓库设置邮箱 git remote remove origin # 移除之前的远程仓库地址 git remote add origin git@github.com:username/repositories.git # 添加远程仓库地址 这里注意下新的 remote 格式，因为之前设置了 config 文件，所以相对的地址为：git@(config 中的 Host):用户名/仓库名.git 即：git@github.com:uesrname/repositories.git\n然后按照同样的方法为 Gitee 设置即可。\n扩展配置 除了为 Git 分配主机和私钥外，也可以为自己的服务器进行设置，首先为服务器设置密钥登陆，可以参考 这里 ；然后将密钥对下载到本地 ~/.ssh 目录下，然后重命名并编辑 config 文件，如下：\n# Github Host github.com HostName github.com User username # username改成你的 Github 用户名 IdentityFile ~/.ssh/github # 私钥位置 # Gitee Host gitee.com HostName gitee.com User username # username改成你的 Github 用户名 IdentityFile ~/.ssh/gitee # 私钥位置 # Tencent Cloud Host tencent HostName xx.xx.xx.xx # 服务器 IP User root Port 22 IdentityFile ~/.ssh/tencent # 私钥位置 之后就可以通过 ssh tencent 进行远程服务器的登陆了。\n代理设置 想要通过代理连接 Github；可以通过以下方式：\n通过 git config 设置： # 使用Socks5 代理（推荐） git config --global https.https://github.com.proxy socks5://127.0.0.1:10808 # 使用 HTTP 代理 git config --global https.https://github.com.proxy https://127.0.0.1:10808 若不需要使用代理，可以取消之前的设置：\ngit config --global --unset https.proxy 通过 SSH 设置（推荐使用）： 在 ~/.ssh/config 配置文件中为 Github 添加代理访问。打开 config 文件进行编辑：\n# Github Host github.com HostName github.com ProxyCommand connect -S 127.0.0.1:10808 %h %p User username IdentityFile ~/.ssh/github 需要注意 ProxyCommand connect -S 127.0.0.1:10808 %h %p 这行：\n-S 代表 Socks，-H 代表 HTTP\n类 Unix 系统下：\n# Github Host github.com HostName github.com ProxyCommand nc -X 5 -x 127.0.0.1:10808 %h %p User username IdentityFile ~/.ssh/github 总结 以上就是 Git 多用户、仓库配置及使用代理的全部过程啦，希望能给大家带来一定的帮助。有个问题就是我在创建 config 配置文件后无法通过 PS (Power Shell) 进行 SSH 连接；连接就报错 Bad owner or permissions ；网上也找了解决方案，但是都没有用。现在一直是使用 Terminal 打开 Git bash 进行 SSH 连接，以后有了好的解决方案会和大家进行分享；也希望能有懂的大佬给出一点建设性的意见，十分感谢🙏\n","date":"2022-11-06T11:56:29+08:00","permalink":"/archives/git_config/","title":"Git 多用户及仓库配置"},{"content":"前言 由于最近腾讯云双11优惠活动，自己购买了一台腾讯云的轻量应用服务器 (老实说还是挺实惠的-。-) 加上自己按捺不住折腾的心，这次一改以前一直使用的 Debian 而选择了 CentOS ；这次的服务器系统我选择的是 CentOS7 ，LNMP 安装方式则是 Oneinstack 和 LNMP 一键安装包都进行了尝试。Debian 下，它们都是完美安装。但是 Centos7 下，在安装过程中 Oneinstack 和 LNMP 一键安装包都碰到了 MariaDB/MySQL 无法安装的情况，由于我是一个 Linux 小白，平常只靠从网上学习，知识量不足；所以在此记录下这次解决过程，以便日后进行查阅。\n解决过程 报错 和往常一样，服务器开通后，我通过 yum 进行了一些基本的 update 、autoremove 、clean 等操作，然后创建 Screen 窗口，输入 LNMP 一键包命令就开始安装了，到最后却发现 MariaDB 安装失败；一开始也不知道啥情况，以为是我选的源码编译方式有问题，后面试了二进制安装依然如此：\n尝试 后面我在网上查了很久，他们说是 Centos 自带了 RPM 包下的 MariaDB ；新安装会有冲突，所以要进行卸载，于是我通过 rpm 命令进行卸载：\n顺带一提，这搜索体验真的是。。。不能说是差强人意吧，也只能说是一言难尽了。。。\nrpm -qa|grep mariadb rpm -e mariadb-lib 发现存在依赖关系，于是加上 nodeps 参数：\nrpm -e --nodeps mariadb-lib 接着满怀期待的又进行安装，最后还是报错-。-\n错误日志 还是硬着头皮来看错误日志吧，我将 /root/lnmp-install.log 安装日志下载下来进行查看。虽然说很长，咱也看不太懂。。。最后还是找到了一些破绽。。。发现应该是 Cmake 版本低了：\n可以看到，这里要求 3.0.0 版本或者更高，而我的版本为 2.8.12.2 ，于是我返回 SSH 使用 yum update cmake 更新之后发现还是 2.8.12.2 版本，于是选择下载最新版本进行编译。\n下载编译 Cmake 打开 下载列表 新下载列表 找到最新版本，然后复制链接，回到 SSH\n# 卸载Cmake yum remove -y cmake # 创建文件夹 mkdir /opt/cmake # 进入目录 cd /opt/cmake # 下载压缩包 wget https://github.com/Kitware/CMake/releases/download/v3.28.3/cmake-3.28.3.tar.gz # 解压 tar -zxvf cmake-3.28.3.tar.gz # 安装依赖 yum install -y gcc gcc-c++ openssl-devel # 进入目录 cd cmake-3.28.3 # 设置编译目录 ./configure --prefix=/usr/local/cmake # 安装 make \u0026amp;\u0026amp; make install # 创建链接 ln -s /usr/local/cmake/bin/cmake /usr/bin/cmake # 查看版本 cmake -version 添加环境变量 vim ~/.bashrc 修改 ~/.bashrc 文件，在最后添加：\nexport PATH=/usr/local/cmake/bin:$PATH 然后刷新一下变量环境：\nsource ~/.bashrc 重新安装数据库 一通操作下来，Cmake 已经是最新版本了，然后进入到 ~/lnmp1.9 也就是 LNMP 一键包解压目录下进行操作：\n./install.sh db 然后选择需要安装的数据库及版本，接下来等待安装完成：\nOK 打开浏览器输入 IP 地址进行访问，还是熟悉的默认页面：\n然后点击 phpMyAdmin 登陆进去，OK 完美！\n添加忽略（可选） 为防止误操作或运行自动化脚本情况导致被覆盖，可以将 cmake 添加忽略，编辑 /etc/yum.conf\nvim /etc/yum.conf 在末尾添加上：\nexclude=cmake* 另外需要注意运行自动化脚本前查看一下是否会对配置文件进行编辑，若存在则需要修改脚本。\n总结 以上就是我在使用 CentOS 安装 LNMP 环境时 MariaDB/MySQL 安装失败的情况，咱也不知道是个例还是就我这个小白这样。。。在此进行一个记录。希望能对大家有所帮助。最后顺带提一下，我咋就想到去折腾 CentOS 了；一直在用的Debian 它不香嘛。。。\n","date":"2022-11-05T17:18:10+08:00","permalink":"/archives/centos_sql_error/","title":"CentOS7 下 MariaDB 安装失败解决方法"},{"content":"前言 一般来说，大家会有一些想法或者突如其来的灵感需要进行记录；那么我们会选择将它们记录在手机便签、文本编辑器或者直接用笔写下来；等最后再梳理成文。正常情况下我们都是在电脑前进行写作，但是有时候不方便在电脑前进行写作；那应该怎么办？今天就来看下我的日常写作方式。\n看过前面文章的应该知道，我自己是将 Hugo 博客源码通过 Git 推送到 Github 远程仓库然后由 Github Actions 自动部署到服务器上面，所以我写文章的流程就是通过 Git 同步远程仓库，写作完成后再推送到远程仓库通过 Github Actions 自动部署就可以了。那么现在就一起来看下这个过程的实现。\n我的话，平常使用的客户端为：家里电脑 (WindowsX2) 、公司电脑 (Windows) 、笔记本 (Linux)、手机 (Android)；简化一点就是 Windows、Linux、Android。一般情况下，我们就是 Win 和 Android 了。要实现在安卓使用 Git 的话，我们就需要安装一款神级软件 Termux\n介绍及安装 Termux Termux 官网 Github 项目地址 Termux 是一款 Android 终端模拟器和 Linux 环境应用程序，无需 root 或设置即可直接运行。 自动安装最小的基本系统 - 可以使用 APT 或其他包管理器。\n你可以通过 F-Droid 或者 Github 进行下载，下载完成之后进行更换清华源，安装 Git ，创建目录软链接，安装 Hugo 即可。\n无法下载或者下载慢可以找国内下载地址。\nTermux 安装使用基于国光大佬的 Termux 高级终端安装使用配置教程 ；写的非常全，强烈推荐观看！！！\n更换清华源 打开 Termux 输入如下命令：\nsed -i \u0026#39;s@^\\(deb.*stable main\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@\u0026#39; $PREFIX/etc/apt/sources.list sed -i \u0026#39;s@^\\(deb.*games stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@\u0026#39; $PREFIX/etc/apt/sources.list.d/game.list sed -i \u0026#39;s@^\\(deb.*science stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@\u0026#39; $PREFIX/etc/apt/sources.list.d/science.list pkg update 安装基础工具：\npkg update pkg install -y curl wget 安装 Git 进行 Git 安装：\npkg update pkg install -y git 创建目录软链接 为了方便管理，我们使用文件管理器在手机存储根目录下创建 termux 文件夹，然后进行软链接：\ntermux-setup-storage 执行以上命令，会弹出授权窗口，确认授权后 Termux 就可以访问 SD 卡文件，然后为创建的 termux 目录创建软链接：\nln -s /data/data/com.termux/files/home/storage/shared/termux termux 执行完上述命令后，就会在 ~ 目录下创建 termux 快捷方式，此目录是链接到我们刚才创建的 termux 目录，方便进行管理。\n安装 Hugo pkg update pkg install -y hugo 上述操作都完成后，就可以在 Android 端使用 Hugo 了。\nGit 配置 全局账户配置 在使用 Git 之前需要进行账户配置，让 Github 知道你是谁：\ngit config --global user.name username # username为你的 Github 用户名 git config --global user.email xx@email.com # XX@email.com为你注册 Github 的邮箱 注意，这里是全局设置，也就是说你所有的本地仓库推送时都是使用这个用户和邮箱\n添加密钥对 键入如下命令创建密钥对：\nssh-keygen -t ed25519 -C \u0026#34;email\u0026#34; 接下来一路回车即可。\n公钥添加至 Github 输入 cat ~/.ssh/id_ed25519.pub 查看公钥内容，然后复制；打开 Github 点击： 右上角头像 - Settings - SSH and GPG keys - New SSH Key 把刚才复制的公钥粘贴到 Key 中，命名随意，然后保存。\n详细图文过程可以参考 这里 本地仓库配置 因为我们创建了一个 Termux 软链接，为了方便管理，我将 Hugo 博客仓库放在此目录中，打开 Termux 进入到 termux 目录，创建博客目录，并设置为 Git 项目仓库：\ncd termux mkdir -p hugo/blog(项目名，我以 blog 为例) cd blog git init 这时候打开文件管理器，进入 termux 目录，可以看到里面已经创建了 hugo/blog 目录，这就是我们的 Hugo 博客仓库了。\n由于 Github 现在默认的分支是 main 所以我也设置本地分支为 main：\ngit branch -m main 这个时候可能会提示添加到安全仓库：\nInitialized empty Git repository in /storage/emulated/0/termux/hugo/blog/.git/ ➜ blog git branch -m main fatal: detected dubious ownership in repository at \u0026#39;/storage/emulated/0/termux/hugo/blog/\u0026#39; To add an exception for this directory, call: git config --global --add safe.directory /storage/emulated/0/termux/hugo/blog 按照提示输入命令添加到安全仓库即可：\ngit config --global --add safe.directory /storage/emulated/0/termux/hugo/blog 添加完成后再更换分支名：\ngit branch -m main 添加远程仓库 git remote add origin git@github.com:username/repositories.git # username换成你的github用户名，repositories更换为你的仓库名 拉取远程仓库 输入下面命令将远程仓库的代码拉取到本地：\ngit pull origin main 拉取完成之后，还需要将我们添加的主题 clone 下来，因为之前时通过 git submodule 进行链接的；比如我在用的 zzo 主题：\ngit clone https://github.com/zzossig/hugo-theme-zzo.git themes/zzo 完成之后，我们就可以通过 Android 端进行写作了。\n本地预览及推送 本地预览 在 Android 端写作完成后，我们也可以通过 hugo server 命令进行本地预览，但是在 termux 下不太一样，直接运行 hugo server 会报错，所以要加上一个 noBuildLock 参数：\nhugo server --noBuildLock 通过上述命令，即可在 Android 端通过 localhost:1313 进行本地预览，同理，如果你要通过 hugo 生成静态文件，也是需要添加 noBuildLock 参数。\n推送 在写作完成及预览无误后，就可以进行推送到远程仓库了。与桌面端一样，通过 push 进行推送：\ngit add . git commit -m \u0026#34;xxxx\u0026#34; git push origin main 推送完成后，等待 Github Actions 自动部署完成后，即可进行访问。\n总结 以上就是我在不同客户端通过 Git 进行同步数据、写作的过程了，希望能给大家提供一个参考。需要注意的是：一定要记得，在不同的客户端下，第一件事是通过 git pull 将远程仓库拉取同步到本地仓库，然后再进行写作\n参考资料 Termux 高级终端安装使用配置教程 通过 SSH 连接到 GitHub ","date":"2022-11-01T13:18:02+08:00","permalink":"/archives/how_to_write/","title":"我写博客的方式"},{"content":"前言 之前讲了通过 Vercel 来进行 Waline 服务端的部署，这是最简单，也是完全免费的方法；但是对于拥有自己服务器的人来说，可能更想要将 Waline 直接部署到自己的服务器上；毕竟服务器摆在那，不用也是浪费，何不将 Waline 服务端也部署自己的服务器上以方便进行管理呢？其实 Waline 提供了很多的部署方案，可以看 这里 ；因为我一直使用的 Caddy 所以我就用 Caddy+MariaDB/MySQL 的方式来搭建，这里记录一下踩坑过程；当然你使用 Nginx/Apache 加上其他数据库的组合也是可以的。\n部署过程 准备工作 域名解析这块就不多讲了，提前绑定到你的服务器 IP ；服务器基本配置与优化可以参考 这里 ；至于 Web 服务这块，如果你使用 Nginx/Apache+MariaDB/MySQL 可以看 这里 搭建好 Web 服务与数据库。\n如果你想和我一样使用 Caddy Server 那么你可以参考 这里 先搭建 Caddy Server ；然后来安装数据库，我这里以 MariaDB/MySQL 为例：\napt update apt install mariadb-server -y 安装完 MariaDB 后，键入以下命令来进行初始化：\nmysql_secure_installation 然后根据下面提示进行操作：\nmysql_secure_installation Enter current password for root (enter for none): # 输入数据库密码，由于并未设置，所以直接回车 Set root password? [Y/n] y # 是否设置数据库 root 密码 New password: Re-enter new password: # 输入两次数据库 root 密码 Remove anonymous users? [Y/n] y # 是否移除匿名用户 Disallow root login remotely? [Y/n] y # 是否禁用 root 远程登陆 Remove test database and access to it? [Y/n] y # 是否移除测试数据库 Reload privilege tables now? [Y/n] y # 是否初始化数据库 All done! If you\u0026#39;ve completed all of the above steps, your MariaDB installation should now be secure. Thanks for using MariaDB! 如果你需要用软件进行远程管理数据库，那么就不要禁用远程登陆，并且需要通过防火墙来开放 3306 端口\n安装 Nodejs 这里要注意，不要直接使用 apt install 进行安装，会导致后面报错，具体原因我也不知道。所以我们可以通过包管理器、二进制文件或者源码编译进行安装。\n包管理器安装 输入以下命令进行安装：\napt-get update apt-get install -y ca-certificates curl gnupg mkdir -p /etc/apt/keyrings curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg NODE_MAJOR=16 echo \u0026#34;deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\u0026#34; | tee /etc/apt/sources.list.d/nodesource.list apt-get update apt-get install nodejs -y 其中 NODE_MAJOR=16 可以自行选择版本：\nNODE_MAJOR=16 NODE_MAJOR=18 NODE_MAJOR=20 NODE_MAJOR=21 安装完成后可通过 node-v 、nmp version、npx -v 检验安装\n卸载：\napt-get purge nodejs \u0026amp;\u0026amp;\\ rm -r /etc/apt/sources.list.d/nodesource.list \u0026amp;\u0026amp;\\ rm -r /etc/apt/keyrings/nodesource.gpg 二进制安装 从 Nodejs官网 下载二进制包，通过创建软链接至系统用户应用程序目录来使用。\n打开 Nodejs 官网，点击 Downloads 然后右键复制 Linux Binaries (x64) 的下载链接：\n然后回到 SSH 软件，使用 wget 命令，下载到任意位置并进行解压然后删除压缩包；我这里以 /usr/local/src 为例：\ncd /usr/local/src # 进入目录 wget https://nodejs.org/dist/v16.18.0/node-v16.18.0-linux-x64.tar.xz # 下载二进制包 tar -Jxvf node-v16.18.0-linux-x64.tar.xz # 解压 mv node-v16.18.0-linux-x64 node # 重命名文件夹 编辑 ~/.bashrc 设置环境变量，加入：\nexport PATH=/usr/local/src/node/bin:$PATH export CPATH=/usr/local/src/node/include:$CPATH export LD_LIBRARY_PATH=/usr/local/src/node/lib:$LD_LIBRARY_PATH 刷新变量环境：\nsource ~/.bashrc 完成后可通过 node -v 、 npm version 、 npx -v 进行验证，返回版本号则表示成功。\n源码编译安装 首先安装依赖：\napt-get install python3 g++ make python3-pip 打开 Nodejs官网 ，复制 Source Code 源码下载地址，接着进行操作：\ncd /usr/local/src wget https://nodejs.org/dist/v20.10.0/node-v20.10.0.tar.gz tar zxvf node-v20.10.0.tar.gz mv node-v20.10.0 node cd node ./configure --prefix=/usr/local/node screen -S node make \u0026amp;\u0026amp; make install 安装完成之后为软件设置环境变量：\nvim ~/.bashrc 在最后添加：\nexport PATH=/usr/local/node/bin:$PATH export CPATH=/usr/local/node/include:$CPATH export LD_LIBRARY_PATH=/usr/local/node/lib:$LD_LIBRARY_PATH 可以为软件设置个软链接：\nln -s /usr/local/node/bin/node /usr/bin/node ln -s /usr/local/node/bin/npm /usr/bin/npm ln -s /usr/local/node/bin/npx /usr/bin/npx 刷新变量环境：\nsource ~/.bashrc 源码编译安装比较费时，具体时间视机器配置而定，可酌情选择安装方式。\n安装 Waline 按照官方给出的独立部署中直接运行的方案，进入你想要安装的位置，安装好模块后直接运行模块内的 vanilla.js 文件：\ncd /usr/local/node/lib npm install -g @waline/vercel 国内服务器请先将 npm 设置为国内镜像！！！\n更换镜像 临时更换 npm --registry https://registry.npmmirror.com install -g @waline/vercel 永久更换 npm config set registry https://registry.npmmirror.com 还原 npm 镜像 npm config set registry https://registry.npmjs.org/ 下载完成后，可以试着运行一下：\nnode node_modules/@waline/vercel/vanilla.js 成功的话可以看到提示：\n此时你可以通过 IP:8360 进行访问；不要着急，按捺下你的小激动，按下 CTRL+C 关闭，然后跟着我继续进行配置。\n配置数据库 到官方文档的 多数据库服务支持 下载我们对应数据库的数据文件，我这里用的 MariaDB(MySQL) 所以下载 waline.sql 然后进行导入数据：\n注意：将源代码直接复制然后自己进行编辑上传，不要直接使用 wget 进行下载。\nmysql -uroot -p # 登陆数据库 Enter password: # 输入密码 CREATE DATABASE waline; # 创建 waline 数据库 USE waline; # 指定数据库 source /path/waline.sql # 导入文件，/path改为你的路径 quit # 退出数据库 创建用户名，密码并赋予 waline 数据库的权限(可选)\nmysql -uroot -p Enter password: CREATE USER \u0026#39;waline\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;密码\u0026#39;; GRANT ALL PRIVILEGES ON waline.* TO \u0026#39;waline\u0026#39;@\u0026#39;%\u0026#39;; flush privileges; quit 配置 systemd 服务 为了方便 Waline 的正常运行与管理，我使用的是 systemd 服务进行管理，创建文件并进行编辑(拿不准的可以在本地新建文件，编辑之后上传)：\ncd /usr/lib/systemd/system/ vim waline.service 模板如下：\n[Unit] Description=Waline [Service] Type=simple ExecStart=[/path/to/node] [path/to/node_modules]/@waline/vercel/vanilla.js Restart=always Environment=PATH=/usr/bin:/usr/local/bin Environment=NODE_ENV=production Environment=MYSQL_DB=数据库名 Environment=MYSQL_USER=用户名 Environment=MYSQL_PASSWORD=密码 WorkingDirectory=[/path/to/node_modules]/@waline/vercel [Install] WantedBy=multi-user.target 其中，占位符内容如下：\n[/path/to/node]：node 可执行文件绝对路径 [path/to/node_modules]：通过 npm 安装模块位置 我的配置如下：\n[Unit] Description=Waline [Service] Type=simple ExecStart=/usr/bin/node /usr/local/node/lib/node_modules/@waline/vercel/vanilla.js Restart=always Environment=PATH=/usr/bin:/usr/local/bin Environment=NODE_ENV=production Environment=MYSQL_DB=数据库名 Environment=MYSQL_USER=用户名 Environment=MYSQL_PASSWORD=密码 WorkingDirectory=/usr/local/node/lib/node_modules//@waline/vercel [Install] WantedBy=multi-user.target 如果你之前按照我的步骤来安装 Node 和 Waline 那么直接将脚本复制然后修改参数即可，如果你的位置和我不一样，那么就需要将 ExecStart 和 WorkingDirectory 项中的路径换成你自己的。不确定可以使用命令查一下：\nwhere is node # node 位置 npm root -g # npm 全局安装位置 在 [Service] 项中，你可以通过 Environment 直接添加 Waline 插件的环境变量\n保存/上传完毕后，让 systemd 重新载入单元文件，并启动 Waline ：\nsystemctl daemon-reload systemctl start waline 此时再访问 http://IP:8360 ，你就能看到评论页面了。\n一些常用的命令：\nsystemctl stop waline # 停止服务 systemctl restart waline # 重启服务 systemctl status waline # 服务状态 systemctl enable waline # 添加开机自启动 反向代理设置 如果你不想通过 IP:8360 进行访问，那么就需要设置反向代理来通过域名进行访问了这里提供两个配置：\nCaddy 我使用的是 Caddy ， Caddy 反代需要修改 /etc/caddy/Caddyfile 文件：\ndomain.com { encode gzip reverse_proxy 127.0.0.1:8360 { header_up Host {host} header_up X-Real-IP {remote} header_up X-Forwarded-For {remote} header_up X-Forwarded-Proto https } file_server tls user@email.com } Nginx Nginx 反向代理如下：\nlocation / { proxy_pass http://127.0.0.1:8360; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header REMOTE-HOST $remote_addr; add_header X-Cache $upstream_cache_status; # cache add_header Cache-Control no-cache; expires 12h; } 总结 以上就是我通过 Caddy+MariaDB 独立部署 Waline 的过程，希望能给大家带来帮助。后期如果需要设置邮件通知等功能可以在 waline.service 文件中的 [Service] 项下直接添加 Environment= 然后根据官方给出的环境变量进行设置即可。\n若 Waline 后台发现有更新提示，可通过 npm 对 Waline 进行更新：\nnpm update @waline/vercel 参考资料 Waline 官方文档 NodeSource - Node.js 官方二进制发行版 通过二进制文件安装 Node.js Node 应用的 Systemd 启动 ","date":"2022-10-20T10:50:47+08:00","permalink":"/archives/waline_deploy/","title":"Waline 服务端独立部署方案"},{"content":"前言 我的博客作为自己记录的地方，没有去做 SEO 也没有去进行优化；可以说完全没有必要去开启评论，但是为什么又添加了评论呢？我觉得万一有人看到了我博客中的一些内容，有什么没有了解的地方，或者说有什么地方需要进行交流，需要进行简单的评论该怎么办？为了这一两句话不可能去到邮箱里跟你进行深度交流，于是最后还是决定开启评论功能，并再此进行一个分享。\n评论系统选择 对于评论系统，我的感觉是一定要便捷，填上昵称，邮件等就可以进行评论，不需要进行注册等繁琐操作； Hugo 中也有许多自带的评论系统，但是大多数都是海外的，使用起来很不方便。最终决定使用基于 Valine 的 Waline ；下面就来讲一下我自己配置的过程。\n通用配置 注册 LeanCloud LeanCloud 国际版 推荐使用国际版，国内版的话需要绑定已备案域名，比较麻烦。。。首先 登陆 或 注册 LeanCloud国际版 并进入 控制台 进入控制台后，点击创建应用，输入你喜欢的应用名称，选择开发版，然后点击创建：\n进入应用，选择左下角的 设置 \u0026gt; 应用凭证 。你可以看到你的各种凭证，先放在这里，后面会用上：\n评论系统配置 Valine 配置 一般来说 Valine 是 Hugo 主题里自带集成的，去稍微配置下就可以使用了；以我正在使用的 Zzo 主题演示。打开博客根目录，找到 config/_default 打开 params.toml 配置文件，然后按照下面注释进行修改：\n有的主题就是在根目录的 config.toml ，需要自己去查看；所有修改应该基于博客根目录，不要去动主题中的文件；渲染时会对主题目录的配置进行覆盖，即：将主题中需要修改的文件复制到博客根目录对应位置，再修改博客根目录文件。\n# comment enableComment = true # 开启评论 disqus_shortname = \u0026#34;\u0026#34; commento = false # Valine. # You can get your appid and appkey from https://leancloud.cn # more info please open https://valine.js.org [valine] enable = true # 开启 Valine appId = \u0026#39;\u0026#39; # AppID 为 你在 LeanCloud 应用凭证中的 AppLD appKey = \u0026#39;\u0026#39; # AppKey 为 你在 LeanCloud 应用凭证中的 AppKey notify = false # verify = false # avatar = \u0026#39;mp\u0026#39; placeholder = \u0026#39;说点什么吧...\u0026#39; visitor = false 配置项及参数参考： 配置项 一般来说，主题的 Valine 评论系统，直接在主题配置文件中设置相应的参数开启即可。如果不是自带的可以往下看 Waline 的操作。\nWaline 配置 通过 Vercel 部署服务端 这一部分可以直接看官方给出的教程 部署 ( 服务端 ) 引入 Waline 及配置 我正在用的 Zzo 主题是不自带 Waline 的，所以我就要进行引入；Zzo 主题关于评论系统的文件夹与文件分别为：\n~/themes/zzo/layouts/partials/comments ~/themes/zzo/layouts/partials/comments/comments.html ~/config/_default/params.toml 和上文一样，修改主题的原则是将主题目录中的文件复制到你博客所在根目录的相同位置进行修改，不要对主题文件夹中的文件进行直接修改；这样做的好处是以后更新主题时，你所做的修改不会被覆盖。\n首先打开主题文件夹的 layouts/partials/comments 找到 comments.html 和 valine.html 将其复制到博客根目录对应位置，先打开 comment.html 进行编辑，按照相同的格式，加上 Waline：\n{{ if $.Param \u0026#34;enableComment\u0026#34; }} {{ if $.Param \u0026#34;disqus_shortname\u0026#34; }} {{ partial \u0026#34;comments/disqus.html\u0026#34; . }} {{ else if $.Param \u0026#34;commento\u0026#34; }} {{ partial \u0026#34;comments/commento.html\u0026#34; . }} {{ else if $.Param \u0026#34;valine.enable\u0026#34; }} {{ partial \u0026#34;comments/valine.html\u0026#34; . }} {{ else if $.Param \u0026#34;changyan.changyanAppid\u0026#34; }} {{ partial \u0026#34;comments/changyan.html\u0026#34; . }} {{ else if $.Param \u0026#34;livere.livereUID\u0026#34; }} {{ partial \u0026#34;comments/livere.html\u0026#34; . }} {{ else if $.Param \u0026#34;gitment.owner\u0026#34; }} {{ partial \u0026#34;comments/gitment.html\u0026#34; . }} {{ else if $.Param \u0026#34;gitalk.owner\u0026#34; }} {{ partial \u0026#34;comments/gitalk.html\u0026#34; . }} {{ else if $.Param \u0026#34;utterances.owner\u0026#34; }} {{ partial \u0026#34;comments/utterances.html\u0026#34; . }} {{ else if $.Param \u0026#34;isso.enable\u0026#34; }} {{ partial \u0026#34;comments/isso.html\u0026#34; . }} {{ else if $.Param \u0026#34;telegram.enable\u0026#34; }} {{ partial \u0026#34;comments/telegram.html\u0026#34; . }} + {{ else if $.Param \u0026#34;waline.enable\u0026#34; }} + {{ partial \u0026#34;comments/waline.html\u0026#34; . }} {{ end }} {{ end }} 然后再打开 waline.html ，按照官方给出的 从 Valine 迁移 进行引入：\n-\u0026lt;script src=\u0026#39;//unpkg.com/valine/dist/Valine.min.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; +\u0026lt;script src=\u0026#39;//unpkg.com/@waline/client@v2/dist/waline.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; +\u0026lt;link href=\u0026#39;//unpkg.com/@waline/client@v2/dist/waline.css\u0026#39; rel=\u0026#39;stylesheet\u0026#39; /\u0026gt; \u0026lt;script\u0026gt; - new Valine({ + Waline.init({ el: \u0026#39;#vcomments\u0026#39;, - appId: \u0026#39;Your appId\u0026#39;, - appKey: \u0026#39;Your appKey\u0026#39; + serverURL: \u0026#39;YOUR SERVER URL\u0026#39; }); \u0026lt;/script\u0026gt; 基本的引入完成后，打开 config/_default/params.toml 添加 Waline 并设置：\n[waline] enable = true ServerURL = \u0026#39;\u0026#39; # 服务端网址是你给 Vercel 服务端绑定的域名 如果你想进行一些个性化的设置，可以参考以下官网。下面是我自己的一个简单的配置：\n~/config/_default/params.tomlparams.toml\n[waline] enable = true ServerURL = \u0026#39;https://domain.com\u0026#39; Lang = \u0026#39;zh-CN\u0026#39; Meta = [\u0026#39;nick\u0026#39;, \u0026#39;mail\u0026#39;, \u0026#39;link\u0026#39;] RequiredMeta = [\u0026#39;nick\u0026#39;] Login = \u0026#39;disable\u0026#39; PageSize = \u0026#39;10\u0026#39; HighLighter = true ~/layouts/partials/comments/waline.html\n\u0026lt;div id=\u0026#34;vcomments\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#39;//unpkg.com/@waline/client@v2/dist/waline.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link href=\u0026#39;//unpkg.com/@waline/client@v2/dist/waline.css\u0026#39; rel=\u0026#39;stylesheet\u0026#39; /\u0026gt; \u0026lt;script\u0026gt; Waline.init({ el: \u0026#39;#vcomments\u0026#39; , locale: { placeholder: \u0026#39;请注意评论礼仪，发布攻击性、无意义内容将会视为垃圾评论进行删除处理。\u0026#39;, nick: \u0026#39;昵称*\u0026#39; }, serverURL: \u0026#39;{{ .Site.Params.waline.ServerURL }}\u0026#39;, emoji: [ \u0026#39;//unpkg.com/@waline/emojis@1.1.0/alus\u0026#39;, \u0026#39;//unpkg.com/@waline/emojis@1.1.0/tieba\u0026#39; ], lang: \u0026#39;{{ .Site.Params.waline.Lang }}\u0026#39;, meta: {{ .Site.Params.waline.Meta }}, requiredMeta: {{ .Site.Params.waline.RequiredMeta }}, login: \u0026#39;{{ .Site.Params.waline.Login }}\u0026#39;, pageSize: \u0026#39;{{ .Site.Params.waline.PageSize }}\u0026#39;, highlighter: {{ .Site.Params.waline.Highlighter }} }); \u0026lt;/script\u0026gt; 配置完成之后你就可以在运行 hugo server 在本地进行评论测试了:\n评论管理 Waline 带有后台，可以实现对评论的管理。部署完成后访问 \u0026lt;serverURL\u0026gt;/ui/register 进行注册，第一个注册的账户会被设定成管理员。\n登录成功后就可以看到评论管理的界面了。在这里可以修改、标记或删除评论。在评论的时候，如果选择登陆账户后进行评论，你的评论昵称后面会显示「博主」字样。如果没有登陆后台评论，一样是不会显示的。\n总结 以上就是 Hugo 博客添加评论系统的过程，希望能给大家做一个参考；至于使用什么评论系统也是看自己的喜好和选择了。没有什么是最好的，只有最适合你自己的。到此 Hugo 搭建博客的一个入门流程也算是结束了，以后自己折腾多了，有时间了；也会进行更进一步的发掘和分享。\n参考资料 LeanCloud 国际版 Valine 官网 Vrecel 官网 Waline 官网 ","date":"2022-10-15T10:50:47+08:00","permalink":"/archives/hugo_comment/","title":"为 Hugo 博客开启评论系统"},{"content":"前言 之前在 《使用 Github Actions 自动化部署 Hugo 博客》 一文中我讲了通过 Github Actions 自动部署 Hugo 博客到 Github Pages ； Github Pages 免费而且无需考虑成本及维护；但是 Github 毕竟是在海外，访问有问题，还时常抽风；访问体验算不上差强人意吧，也只能说是大失所望了。那怎样简单又低成本解决这个问题呢？ (毕竟白嫖才是硬道理) 现在就来看一下今天的主角：\nVercel 官网 Vercel 提供创新者在灵感瞬间创造所需的速度和可靠性 - 来自官方主页。\nNetlify 官网 用你喜欢的工具，轻松地在全球范围内自动化构建你的网站 - 来自官方主页。\nVercel 和 Netlify 都属于页面托管服务，不需要进行复杂的配置；可以一键部署与构建你的网站。Vercel 和 Netlify 主要面向的是 Web 端的开发者，用于帮助他们快速搭建自己的 Web 端业务，可以完全实现前端业务的独立运维。它们都拥有以下优点：\n免运维：不需要管理服务器主机或者服务器进程。 弹性伸缩：根据负载进行自动规模伸缩与自动配置。 按需付费：根据使用情况决定实际成本。 高可用：具备隐含的高可用性。 使用与部属 这里我以 Vercel 为例，因为他们两家操作都差不多，首先打开 Vercel 官网，点击右上角 Sign Up - Continue with GitHub 使用 Github 进行登陆：\n之后让你进行授权，点击确认授权即可：\n进入管理面板后，点击 Create a New Project 来创建新项目，然后选择 Countinue with GitHub 导入 Github 的仓库：\n到这会让你选择仓库，你可以选择读取所有仓库，或者指定读取某一个仓库 (这里我就选择读取我 Hugo 博客的仓库) ，然后 Install：\n之后会回到管理面板，点击 Improt 导入你刚才选择的仓库；然后就会进入部署配置页面，一般来讲是会自动识别你仓库的程序，然后自动选择好部署配置。如果没有的话可以自己设置；记得在环境变量添加一个 HUGO_VERSION 记录值为 Hugo 最新版本号，以防有的主题对版本有要求从而导致部署失败；设置完后就可以直接点击 Deploy 进行部署了：\n等待部署，看到完结撒花就代表已经部署完成了：\n然后点击 Continue to Dashboard 进入管理面板，再点击 Settings - Domains 为你的网站添加一个域名；输入你自己的域名后点击 Add 即可添加：\n因为 Vercel 分配的二级域名是被 DNS 污染了的，所以通过二级 Vercel 分配的域名是访问不了的\n在添加域名之后会提示你设置 CNAME 解析至 cname.vercel-dns.com ，这时候到你域名的管理商或者 DNS 提供商处添加 CNAME 解析即可：\n设置完成后等待域名解析， Vercel 会自动添加 SSL 证书，并且设置 HTTPS 访问。\n至于托管到 Netlify 的部署过程和 Vercel 是大同小异的，看你怎么选择，区别就只在于 Vercel 的二级域名不能进行访问，需要添加自己的域名而已。\n总结 至此 Hugo 博客托管到 Vercel/Netlify 进行自动部署完成；通过测试，可以看到访问速度对比 Github Pages 还是拥有不小的提升的 (左边为 Vercel 右边为 Github Pages)：\n在 Github 仓库导入到 Vercel/Netlify 之后，你每一次提交代码到 Hugo 博客仓库，这边都会自动进行部署及发布，相当于 Github Actions 自动部署并发布到 Github Pages 是一样的，不需要进行额外操作，非常方便。\n参考资料 Vercel 官网 Netlify 官网 Hugo 官方文档 - Host On Netlify ","date":"2022-09-18T14:02:55+08:00","permalink":"/archives/hugo_deploy/","title":"Hugo 博客部署至托管服务提升访问体验"},{"content":"前言 之前在 《使用 Hugo 搭建个人博客及部署》 一文中, 我讲了通过 Hugo 来搭建个人博客, 并部署到 Github Pages 来实现一个在线访问.但是这样手动部署一开始还觉得比较新奇有趣, 时间一长的话难免会觉得有些麻烦, 一有什么改动就要全部重新部署, 那么本文就将讲一下通过 Github Actions 来实现将我们的 Hugo 博客自动部署到 Github Pages 或者我们自己的云服务器上, 现在就一起来看一下.\n注意: 本文所有操作的前提条件是在 《使用 Hugo 搭建个人博客及部署》 一文的基础上, 可以先行查阅.\n介绍与准备 Github Actions 是什么 GitHub Actions 是一种持续集成和持续交付 (CI/CD) 平台, 可用于自动执行生成、测试和部署管道.你可以创建工作流来构建和测试存储库的每个拉取请求, 或将合并的拉取请求部署到生产环境. GitHub 提供 Linux、Windows 和 macOS 虚拟机来运行你的工作流程, 或者你可以在自己的数据中心或云基础架构中托管自己的自托管运行器.\n准备工作 以本文描述所说, 通过 Github 提供的 Actions 服务将 Hugo 博客自动部署到Github Pages 和云服务器, 那就需要以下准备:\n存放 Hugo 博客项目的仓库, 该仓库拥有用于生成博客的 Markdown 文件, 生成静态博客的配置文件、主题等等; 也就是相当于我们本地博客的根目录, 该仓库可以设为私有. 存放 Hugo 博客生成的静态文件仓库, 用于 Github Pages 进行访问; 仓库名为 username.github.io , 该仓库为开源. 服务器或者虚拟主机, 是你自己购买的, 同样用于存放 Hugo 博客生成的静态文件. 下面一步步来进行操作.\n配置 Github Actions 创建配置文件 首先, 在本地博客仓库根目录下, 创建 .github/workflows/depoly.yaml 文件名 depoly 随意, 这个就是 Github Actions 配置文件, 然后打开 VS Code 进行编辑; 复制下面的内容, 粘贴进去, 然后根据注释进行修改; 操作完成后删除注释并保存:\nname: Deploy on: push: branches: - main # 触发条件, 在 push 到 main 分支后 workflow_dispatch: # 触发条件, 在 Github 仓库 Action 工具手动调用 jobs: # 任务 build-and-deploy: runs-on: ubuntu-latest # 指定虚拟机环境为 Ubuntu 新版 steps: - name: Checkout # 拉取代码 uses: actions/checkout@v2 # 使用其他用户配置 with: submodules: true # 包含子模块,也就是链接的主题 fetch-depth: 0 - name: Setup Hugo # 安装 Hugo uses: peaceiris/actions-hugo@v2 # 使用其他用户配置 with: hugo-version: latest # Hugo 版本选择 extended: true - name: Build Hugo # 生成博客静态文件 run: hugo --minify - name: Deploy GhPages # 部署到 Github Pages uses: peaceiris/actions-gh-pages@v3 # 使用其他用户配置 with: personal_token: ${{ secrets.PERSONAL_TOKEN }} # Personal Token external_repository: username/username.github.io # Github Pages 仓库名, username 换成你的 publish_branch: main publish_dir: ./public commit_message: ${{ github.event.head_commit.message }} - name: Deploy To VPS # 部署到个人服务器 uses: cross-the-world/scp-pipeline@master with: host: ${{ secrets.DC_HOST }} # Actions Secrets Token user: ${{ secrets.DC_USER }} # Actions Secrets Token pass: ${{ secrets.DC_PASS }} # Actions Secrets Token port: ${{ secrets.DC_PORT }} # Actions Secrets Token connect_timeout: 10s local: \u0026#39;./public/*\u0026#39; remote: /var/www/html/ # 网站根目录 如果你不需要部署到个人服务器，可以将最后一个 Action (部署到个人服务器) 删除\n人看麻了? 没关系, 我们只要明白少数几个地方即可, 我来慢慢梳理:\non 字段指定触发工作流的条件, 通常是某些事件, 如： on: push # 指定 push 事件可以触发 jobs字段表示需要执行的任务\nsteps 字段表示任务流程, 我们这个配置流程为:\nsteps: - name: Setup Hugo - name: Build Hugo - name: Depoly GhPages - name: Depoly TO VPS steps 字段下的 name , use , with 加起来就是一个 Action\nname 表示一个 Action 的名称\nuse 表示使用某个别人写好的插件\nwith 表示传递给插件的参数\n创建 Token 重点来了, 现在配置文件已经编辑好了, 我们需要创建相对应的 Token 来给 Actions 使用\nPersonal Token 打开 Github 点击 右上角头像 - Settings - Developer setting - Personal access tokens - Generate new token 创建一个 Token, 记得要勾选 repo 和 workflow 权限:\n生成后复制 Token 注意: Token 只会出现一次\n复制后打开存放 Hugo 博客的仓库, 点击 Settings - Secrets - Actions - New repository secret 输入刚才复制的 Token , 名字为 PERSONAL_TOKEN\n如果你不需要将博客静态文件部署到个人服务器, 那么到这里就结束了. 下面来讲下部署到个人服务器的设置\nActions Secrets Token 在 Actions 配置文件中, 最后一个流程是部署到个人服务器, 那么这里有几个选项也是需要创建 Token 的, 分别为：\nhost 你的服务器 IP user 登陆用户名 pass 登陆密码 port SSH 端口，默认为 22, 如果修改了端口，或者供应商有指定端口，填入指定端口即可 以 host 为例, 在存放 Hugo 博客的仓库, 点击 Settings - Secrets - Actions - New repository secret 输入 Token Name 为 DC_HOST , Secret 为你的服务器 IP 地址, 对应配置文件中的 ${{ secrets.DC_HOST }} 项\n之后分别创建相对应的 Token ,然后修改最后一行 remote 网站根目录即可。\n推送及更新 全部配置完成之后, 我们就可以将配置文件进行推送了, 将我们的本地博客仓库推送到创建好的私密仓库中:\ngit init # 初始化仓库 git branch -M main # 设置分支为main git add . # 添加全部文件 git commit -m \u0026#34;Hugo 博客仓库第一次提交\u0026#34; # 添加提交信息 git remote add origin git@github.com:username/name.git # 添加远程仓库, 格式为: 用户名/仓库名 .git git push origin main # 推送 推送完成后，等待一会然后打开 Hugo 仓库的 Actions 我们就可以看到工作流已经完成:\n再打开存放静态文件的仓库, 可以看到静态文件已经自动部署完毕并且生成 Github Pages 了:\n参考资料 Actions 官方文档 Actions 入门教程 Actions 插件市场 总结 以上就是通过 Github Actions 实现的 Hugo 博客自动部署系统, 以后只需要在本地写好文章, 然后 Push 到 Github 的 Hugo 博客仓库中就可以自动进行静态文件生成和部署啦,可以说是方便又好用. 最重要它还是免费的, 这样写博客的方式是否够优雅呢?\n","date":"2022-07-16T13:25:48+08:00","permalink":"/archives/hugo_actions/","title":"使用 Github Actions 自动化部署 Hugo 博客"},{"content":"前言 很早开始就接触到个人博客这块了，一开始是到处泛滥的 YH 、 BY 分销；各种免费主机，再到后来自己买虚拟主机、VPS 进行个人博客的使用；由于我懒得备案，于是一直用的是海外的服务器；但是海外服务器也有问题，就是访问体验相较于国内还是比较差的。 WordPress 的话，对我个人而言感觉比较臃肿，所以后面又用了 Typecho ；到最后工作、生活等诸多琐事导致没有太多的时间去进行打理，而且服务器的长期维护也是一笔不小的开支。\n到后面我发现了 Hugo + GitHub Pages 这一方案，既可以进行托管，节省了许多维护心力，又能随时进行写作；虽然在部署与搭建上需要进行一些配置，但是后续更新和维护还是比较方便的。因此，在这里将博客系统搭建及部署进行记录，希望对大家有所帮助。\n博客程序选择 目前已经有很多比较成熟的博客平台，如前文所提到的 WordPress，虽然功能强大，但对于个人博客站点来说有些太臃肿了，我认为个人博客就是自己在上面写一些东西，进行一个分享与记录；轻巧一点会比较好。而 Typecho 等轻量级博客程序就挺符合我的口味，但是如前文所说，我并没有太多的时间去进行打理和维护；经过一段时间的寻找与调研，我最终选择了 Hugo 这个高效的静态网站生成器。\n关于 Hugo Hugo 官网 Hugo - 世界上最快的网站构建框架，Hugo 是最流行的开源静态站点生成器之一。 凭借其惊人的速度和灵活性，Hugo 让构建网站再次变得有趣。（来自官网介绍）\nHugo 是用 Golang 编写的网站构建程序，采用 Markdown 进行文章编辑，自动生成静态站点文件，支持丰富的主题配置，也可以通过 js 嵌入像是评论系统等插件，高度定制化。除了 Hugo 外， 还有 Jekyll、Hexo、VuePress、Gitbook、Docsify 等选择，实现和使用都差不多，可以根据自己的偏好进行选择。\n安装与部属 安装 Hugo 及相关程序 安装 Hugo Windows 用户使用 Chocolatey 安装\nchoco install hugo -confirm 不想使用 Chocolatey 管理包的话也可以直接到官网下载程序到本地目录，然后添加环境变量\nMacOS 用户使用 Homebrew 安装\nbrew install hugo 安装完成后通过 hugo version 进行验证安装\n安装 Git Git 官网 下载完成后按照默认配置，一路下一步即可完成安装。\n安装 VS Code VS Code 官网 下载适合自己系统的版本，然后一路默认配置安装即可。\nVS Code 插件推荐：\nMarkdown All in One Markdown 写作利器\nChinese Language Pack for Visual Studio Code VS Code 汉化插件\nAuto Rename Tag 涉及修改代码时很好用\n创建 Hugo 网站及配置 创建网站 我这里的操作均在 Windows 系统下，其他系统步骤都一样。\n打开 Git Bash 进入到需要放置网站的目录，即可通过 hugo new site 命令进行创建网站了：\ncd /e # 进入E盘 mkdir hugo # 创建 hugo 文件夹 cd hugo # 进入hugo文件夹 hugo new site name # 创建新网站，name可以自行设置 配置主题 当通过上文命令创建我们的站点后，需要进行主题配置，Hugo 拥有丰富的主题，可以通过官网 Themes 菜单选择自己喜欢的风格，查看预览效果，选择后可以进入主题项目仓库，一般都会有很详细的安装及配置说明。下面我就以 m10c 这个主题为例，演示一下配置流程。\n关联主题仓库 我们可以将主题仓库直接 git clone 下来进行使用，但这种方式有一些弊端，当之后自己对主题进行修改后，可能会与原主题产生一些冲突，不方便版本管理与后续更新。我采用的是 git submodule 方式进行仓库链接，这样后续可以对主题的修改进行单独维护。\ncd name git init git submodule add https://github.com/vaga/hugo-theme-m10c.git themes/m10c 更新主题 如果需要同步主题仓库的最新修改，运行以下命令：\ngit submodule update --remote 初始化主题配置 每个主题一般都会提供一些实例配置与初始页面，开始使用主题时可以将其 exampleSite/ 演示站点目录下的文件复制到站点目录下，在此基础上进行调整配置。\ncp -rf themes/m10c/exampleSite/* ./ 初始化主题基础配置后，我们可以在 config.toml 文件中进行站点细节配置，将博客站点配置文件中的 baseURL 改为自己的域名，或者直接设置为 / ；其余具体配置项参考各主题说明文档，或者作者主题仓库中的详细说明。\n调试主题 完成一些基本的站点配置后，我们就可以通过 hugo server 命令进行本地实时预览：\n运行服务后，我们可以通过浏览器 http://localhost:1313 地址访问我们的本地预览网页：\n发布新文章 上述操作都完成后，就可以进行新文章的发布了，通过 hugo new 命令即可进行发布新文章\nhugo new posts/start.md 发布新文章后，我们就可以通过 VS Code 进行编辑了。\n部署网站 Git Pages 设置 开通 Github Pages 仓库 Github Pages 项目仓库需要符合 username.github.io 的特殊命名格式，这样博客站点才能正常访问 GitHub Pages 生成的网站服务。\n生成静态文件 配置完主题，并发布新文章之后，就可以通过 hugo 命令来生成静态网页文件\nhugo 发布站点 Hugo 默认会将生成的静态网页文件存放在 public 目录下，我们可以通过将 public 目录初始化为本地仓库，并关联我们的 Github 远程仓库来推送我们的网页静态文件。\ncd public git init git add . git branch -M main # 好像现在官方默认是main分支 git commit -m \u0026#34;博客第一次提交\u0026#34; 提交到本地仓库后，就可以开始推送到 Github 远程仓库了；在此之前要先进行一些设置：\n添加密钥 这个密钥是用来安全连接 Github 远程仓库的，使用 Https 方式连接可能会出现各种问题，输入下面命令生成密钥，然后按下几次回车即可：\nssh-keygen -t ed25519 -C \u0026#34;你的Github邮箱\u0026#34; 生成完毕后输入 cat ~/.ssh/id_ed25519.pub 查看公钥内容：\n复制展示出来的公钥，然后打开 Github 点击 右上角头像 - Settings - SSH and GPG keys - New SSH Key 把刚才复制的公钥粘贴到 Key 中，命名随意，然后保存：\n然后回到 Git Bash 添加远程仓库\ngit remote add origin git@github.com:username/username.github.io.git # username换成你的github用户名 git push origin main 之后会提示你是否将 github.com 添加到主机列表，输入 yes 回车即可\n推送完成后，稍等几分钟即可通过 Github Pages 域名 username.github.io 来访问我们的博客站点了。\n绑定域名 推送完毕后就可以绑定自己的域名了，绑定域名前，先到你的域名服务商或者 DNS 提供商处添加 CNAME 记录解析到 username.github.io 也就是你的 Github Pages 仓库名 (我这里是 CloudFlare ) ：\n进入 Github Pages 仓库，点击 Settings - Pages 找到 Custom domain 输入你自己的域名，等待验证 DNS 后开启 HTTPS ：\n总结 以上就是使用 Hugo 与 Github Pages 搭建个人博客的一个简单过程；后续还会进行更加详细的解读与说明，希望能够对大家有所帮助。\n","date":"2022-05-03T10:50:47+08:00","permalink":"/archives/hugo/","title":"使用 Hugo 搭建个人博客及部署"},{"content":"前言 在之前的文章中讲了在添加网站时通过 Oneinstack（LNMP 一键安装包）的 acme.sh/Caddy 来自动安装部署免费证书，当然你也可以使用自己的证书替代免费证书来进安装部署；现在来看下如何进行操作。\n场景与前提 由于我使用的是 Oneintack 安装的 Nginx 和 Caddy 服务，所以本文以 Nginx/Caddy 视角进行操作。我的域名是在腾讯云下，并使用他们提供的为期1年免费 Trust Asia 证书，所以我以这些前提为演示；使用其他的也是完全可以的。\n操作步骤 下载并上传证书 首先登陆到域名控制面板，申请好你所需要的证书，然后下载到本地；如我在腾讯云下载的 Nginx 类型证书：\n文件内容： domain.com_nginx.zip ├ domain.com_nginx │ ├ domain.com.scr │ ├ domain.com.key │ ├ domain.com_bundle.crt │ ├ domain.com_bundle.pem 将其解压出来，并全部命名为 domian.com.xxx ；然后将 domain.com.scr 、domian.com.key 和 domian.com.crt 上传至 SSL 存放位置。\n通过 Oneinistack 安装的位置位于 /usr/local/nginx/conf/ssl\n添加网站 上传完成后，即可使用 Oneinstack 通过自有证书模式添加网站：\n~/oneinstack/vhost.sh 输入 2 选择自有 SSL ，然后完成添加即可。\n添加完成后可通过 nginx -t 进行测试，无误后即可通过 nginx -s reload 重载 Nginx：\nnginx -t nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful nginx -s reload 使用已有网站 若需要将证书部署至已有网站，则修改对应的配置文件即可，配置文件位于 /usr/local/nginx/conf/vhost/domian.com.conf\nvim /usr/local/nginx/conf/vhost/domian.com.conf 按照备注位置修改证书路径：\nserver { listen 80; listen [::]:80; listen 443 ssl http2; listen [::]:443 ssl http2; # 证书文件的相对路径或绝对路径 ssl_certificate /usr/local/nginx/conf/ssl/domain.com.crt; # 私钥文件的相对路径或绝对路径 ssl_certificate_key /usr/local/nginx/conf/ssl/domain.com.key; ssl_protocols TLSv1.2 TLSv1.3; ssl_ecdh_curve X25519:prime256v1:secp384r1:secp521r1; ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256; ssl_conf_command Ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256; ssl_conf_command Options PrioritizeChaCha; ssl_prefer_server_ciphers on; ssl_session_timeout 10m; ssl_session_cache shared:SSL:10m; ssl_buffer_size 2k; add_header Strict-Transport-Security max-age=15768000; ssl_stapling on; ssl_stapling_verify on; } 修改完成后可通过 nginx -t 进行测试，无误后即可通过 nginx -s reload 重载 Nginx：\nnginx -t nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful nginx -s reload Caddy 操作 同样将 domian.com.key 和 domian.com.crt 上传至服务器，比如我上传到 /var/caddy/ssl 目录下，然后对 Caddyfile 进行修改：\nvim /etc/caddy/Caddyfile 按照下面进行更改：\ndomain.com { log { output file /var/log/caddy/domain.com.log level error } root * /var/www/domain.com encode gzip handle_errors { rewrite * /{err.status_code}.html file_server } php_fastcgi unix//dev/shm/php-cgi.sock file_server # 证书和密钥的 PEM 格式的文件绝对路径，注意中间空格 tls /path/to/domain.com.pem /path/to/domain.com.key } 设置完毕后，通过以下命令进行测试：\ncaddy adapt --config /etc/caddy/Caddyfile 确认无误后重载配置文件：\ncaddy reload --config /etc/caddy/Caddyfile 若出现 ERR_SSL_PROTOCOL_ERROR，可重载 Caddy:\nsystemctl restart caddy 总结 以上就是 Nginx/Caddy 服务下安装部署 SSL 证书的详细过程，希望能对大家有所帮助。\n参考资料 Nginx 服务器 SSL 证书安装部署 ","date":"2022-04-02T10:17:55+08:00","permalink":"/archives/own_ssl/","title":"SSL 证书安装部署"},{"content":"前言 前几天使用 Oneinstack 添加网站进行临时测试，在自动签发 SSL 时发现证书签发失败；找了很久尝试了很多解决方法，但是并没有作用。。。然后想有没有可能是因为在同一 IP 多次申请 SSL 证书然后被限制了；但是我并没有进行多次申请。。。不管怎么样还是更换一下 CA 机构看看能不能解决，没想竟然成功了；虽然没有找到问题的原因，但最终还是解决了。遂在此进行一个记录。\n指定 CA 机构 服务器环境 我的服务器使用的是 Debian 10/11 ，Web 服务使用的是 Nginx/Caddy ；LNMP 环境由 Oneinstack 自动安装\nNginx 由于 Oneinstack 集成了 acme.sh ，所以直接更换 acme.sh 的默认 CA 即可（我之前的是 Let\u0026rsquo;s Encrypt ，现在换成 ZeroSSL ）：\ncd ~/.acme.sh acme.sh --set-default-ca --server zerossl CA 机构：\nCA 机构 有效期 ECC 域名数 通配符 IPV4 IPV6 Let\u0026rsquo;s Encrypt 90 Yes 100 Yes No No ZeroSSL 90 Yes 100 Yes No No Google 90 Yes 100 Yes No No Buypass 180 Yes 5 Paid No No SSL.com 90 Yes 2 Paid No No HiCA 180 Paid 10 (1通配符) Yes Yes Yes LNMP 一键安装包的话，可以使用上述方式指定默认 CA ，也可以在添加网站时手动选择 CA\nCaddy Caddy 比较简单，由于它是自动开启 HTTPS 的。在编辑 Caddyfile 添加网站时，只需要填上域名，它就会自动签发证书：\ndomain.com { } 或者你也可以设置 tls 邮箱，Caddy 会在签发证书遇到问题时自动更换 CA：\ndomain.com { tls your@email.com } 如果你需要指定 CA 机构为 ZeroSSL，你可以进行全局设置：\n{ acme_ca https://acme.zerossl.com/v2/DV90 email your@email.com } domain.com { } 或者单独对某个网站进行设置：\ndomain.com { tls your@email.com { ca https://acme.zerossl.com/v2/DV90 } } 如果要指定 CA 为 Let’s Encrypt，只需要将 https://acme.zerossl.com/v2/DV90 更换为 https://acme-v02.api.letsencrypt.org/directory 即可\n","date":"2022-03-20T09:32:18+08:00","permalink":"/archives/setca/","title":"指定签发 SSL CA 机构"},{"content":"前言 以前一直使用的是 Hugo + Github + Vercel；即上传本地网站项目到 Github 然后通过 Vercel 进行自动部署以及发布网站。一开始还好，但是到后面就感觉比较麻烦了；每次更新文章或者后期文章有修改的话就需要重新上传部署；所以后面就改成了 Typecho。而最近又开始折腾起了 Caddy，需要搭建 LCMP 环境，所以在这里进行一个记录，避免以后踩坑。\n安装及配置 安装Caddy 我使用的是 Debian 10 系统\napt install -y debian-keyring debian-archive-keyring apt-transport-https curl -1sLf \u0026#39;https://dl.cloudsmith.io/public/caddy/stable/gpg.key\u0026#39; | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg curl -1sLf \u0026#39;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt\u0026#39; | tee /etc/apt/sources.list.d/caddy-stable.list apt update apt install caddy 安装 MariaDB 可以使用 Oneinstack 自动安装，参考：一键安装 LNMP 及开设站点 这里主要讲讲通过 apt 包管理器安装\n首先安装 MariaDB：\napt update apt install -y mariadb-server mariadb-common mariadb-client MySQL 或者 MariaDB 都行，看个人选择进行安装，两个差别不大\n按照下面简单修改下配置，文件位于 /etc/mysql/mariadb.conf.d/50-server.cnf\n[client] default-character-set = utf8mb4 [mysqld] innodb_buffer_pool_size = 64M max_allowed_packet = 500M net_read_timeout = 3600 net_write_timeout = 3600 [mariadb] character-set-server = utf8mb4 [client-mariadb] default-character-set = utf8mb4 启动 MariaDB 并进行安全设置\nsystemctl start mariadb mysql_secure_installation 过程如下：\n# 输入初始密码，回车即可 Enter current password for root (enter for none): OK, successfully used password, moving on... # 设置密码 Set root password? [Y/n] y New password: Re-enter new password: Password updated successfully! Reloading privilege tables.. ... Success! # 移除匿名用户 Remove anonymous users? [Y/n] y ... Success! # 是否禁止非本地登录 Disallow root login remotely? [Y/n] n ... skipping. # 是否移除测试数据 Remove test database and access to it? [Y/n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success! # 是否重新刷新权限 Reload privilege tables now? [Y/n] y ... Success! Cleaning up... Thanks for using MariaDB! 安装 PHP 通过 apt list php* 可以看到 Debian10 下 PHP 版本为 7.3，然后来安装 PHP 及其组件\napt update apt install -y php7.3 php7.3-bcmath php7.3-bz2 php7.3-cgi php7.3-cli php7.3-common php7.3-curl php7.3-dba php7.3-enchant php7.3-fpm php7.3-gd php7.3-gmp php7.3-imap php7.3-interbase php7.3-intl php7.3-json php7.3-ldap php7.3-mbstring php7.3-mysql php7.3-odbc php7.3-opcache php7.3-pgsql php7.3-phpdbg php7.3-pspell php7.3-readline php7.3-recode php7.3-snmp php7.3-soap php7.3-sqlite3 php7.3-sybase php7.3-tidy php7.3-xml php7.3-xmlrpc php7.3-xsl php7.3-zip 按照下面简单修改下配置文件，位于 /etc/php/7.3/fpm/pool.d/www.conf\nuser = caddy group = caddy listen.owner = caddy listen.group = caddy listen.acl_users = caddy listen.allowed_clients = 127.0.0.1 pm.max_children = 50 pm.start_servers = 5 pm.min_spare_servers = 5 pm.max_spare_servers = 35 slowlog = /var/log/www-slow.log php_admin_value[error_log] = /var/log/www-error.log php_admin_flag[log_errors] = on # 最后添加如下 php_value[session.save_handler] = files php_value[session.save_path] = /var/lib/php/session php_value[soap.wsdl_cache_dir] = /var/lib/php/wsdlcache php_value[opcache.file_cache] = /var/lib/php/opcache 然后按照下面简单修改下 php.ini，位于 /etc/php/7.3/fpm/php.ini\ndisable_functions = passthru,exec,shell_exec,system,chroot,chgrp,chown,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore max_execution_time = 300 max_input_time = 300 post_max_size = 128M upload_max_filesize = 128M expose_php = Off short_open_tag = On mysqli.default_socket = /run/mysqld/mysqld.sock pdo_mysql.default_socket = /run/mysqld/mysqld.sock 设置下权限\nchown caddy:caddy /var/lib/php/session chown caddy:caddy /var/lib/php/wsdlcache chown caddy:caddy /var/lib/php/opcache Caddy 配置 修改 Caddyfile 配置，拿不准的可以下载下来进行编辑，然后再上传，文件路径为 /etc/caddy/Caddyfile\nvim /etc/caddy/Caddyfile 我的配置如下：\nexample.com { # 网站根目录 root * /var/www/xx # Typecho 伪静态，建议安装完程序后写入 @key1 { not file path_regexp key1 \u0026#39;(.*)\u0026#39; } rewrite @key1 /index.php{re.key1.1} # 开启 gzip encode gzip # 错误页面 handle_errors { rewrite * /{err.status_code}.html file_server } # 使用 unix socket 通信 php_fastcgi /run/php/php7.3-fpm.sock file_server # 设置 TLS tls mail@example.com } 若使用 Oneinstack 自动安装方式，php_fastcgi 设置为 unix//dev/shm/php-cgi.sock 伪静态可以在网上查找对应程序的伪静态规则，然后通过 伪静态转换工具 进行转换，伪静态规则建议等上传并安装完程序后再写入到配置中\n配置完成后使用 caddy adapt 命令进行检查：\ncaddy adapt --config /etc/caddy/Caddyfile 确认无报错后，重载 Caddyfile ：\ncaddy reload --config /etc/caddy/Caddyfile 重启 Caddy 并添加自启动\nsystemctl restart caddy systemctl enable caddy 注意！网站根目录权限应遵循：\n文件 644 文件夹 755 权限用户和用户组 caddy ，其余文档 777 权限是不正常的 如出现文件权限问题时，请执行下面 3 条命令：\nchown -R caddy:caddy /data/www/ find /data/www/ -type d -exec chmod 755 {} \\; find /data/www/ -type f -exec chmod 644 {} \\; ","date":"2022-03-05T17:14:41+08:00","permalink":"/archives/lcmp/","title":"使用 Caddy + MariaDB + PHP 架设 LCMP"},{"content":"前言 LNMP一键安装包是什么 LNMP一键安装包是一个用 Linux Shell 编写的可以为 Linux VPS 或独立主机安装 LNMP(Nginx/MySQL/PHP)、LNMPA(Nginx/MySQL/PHP/Apache)、LAMP(Apache/MySQL/PHP) 生产环境的 Shell 程序。\n我们为什么需要它? 编译安装需要输入大量的命令，如果是配置生产环境需要耗费大量的时间。 不会 Linux 的站长或 Linux 新手想使用 Linux 作为生产环境……\n它有什么优势和功能? 无需一个一个的输入命令，无需值守，编译安装优化编译参数，提高性能，解决不必要的软件间依赖，特别针对配置自动优化。\n安装教程 说明 LNMP 一键安装包官网 注意事项\n需要 5GB 以上可用空间，MySQL 5.7,MariaDB 10 至少 9GB 剩余空间, MySQL8.0 最新版至少 25GB 以上.\n需要 128MB 以上内存( 128MB 小内存 VPS , Xen 需有 SWAP,OpenVZ 至少要有 128MB 以上的 vSWAP 或突发内存)，注意小内存请勿使用 64 位系统！\n安装 MySQL 5.6 或 5.7 及 MariaDB 10 必须 1G 以上内存，更高版本至少要 2G 内存!。 安装 PHP 7 及以上版本必须 1G 以上内存!。\n不要在非常新的 Linux 发行版上安装旧的 PHP/MySQL 版本，同理不要在旧的 Linux 发行版上安装非常新的PHP/MySQL 版本。\nCentOS 6、8 请用 lnmp 1.9+ 版本进行安装！\nUbuntu 18+,Debian 9+,Mint 19+,Deepin 15.7+ 及所有新的 Linux 发行版只能使用 1.7+ 进行安装！\nPHP 7.1.* 以下版本不支持 Ubuntu 19+、Debian 10+ 等等非常新的 Linux 发行版！\n阿里云 Ubuntu 14.04 系统模版有问题不要用！！！\nPHP 7.4 升级或安装必须 CentOS 7+,Debian 8+,Ubuntu 16.04+ 且必须使用 1.7+ ！！！\nMySQL 8.0.23 以下版本升级或安装必须 CentOS 8+,Debian 9+,Ubuntu 16.04+ 且必须使用 1.7+ ！！！\nMySQL 8.0.24 以上版本升级或安装必须 Debian 11+,Ubuntu 20.04+,Fedora 33+ 且必须使用 1.8+ ！！！\n安装步骤 使用 SSH 工具登录 VPS 或服务器 为防止本地网络变化等不确定因素导致安装终止，先键入命令创建一个作业窗口：\nscreen -S lnmp 如果提示 screen: command not found 命令不存在可以执行： yum install screen 或 apt-get install screen 安装\n下载并安装 LNMP 一键安装包 wget http://soft.vpser.net/lnmp/lnmp1.9.tar.gz -cO lnmp1.9.tar.gz \u0026amp;\u0026amp; tar zxf lnmp1.9.tar.gz \u0026amp;\u0026amp; cd lnmp1.9 \u0026amp;\u0026amp; ./install.sh lnmp 如需要安装 LNMPA 或 LAMP ，将 ./install.sh 后面的参数 lnmp 替换为 lnmpa 或 lamp 即可。同时也支持单独安装 Nginx 或数据库，命令为 ./install.sh nginx 或 ./install.sh db 如需更改网站和数据库目录、自定义 Nginx 参数、 PHP 参数模块是否安装、开启 lua 等需在运行 ./install.sh 命令前修改安装包目录下的 lnmp.conf 文件，详细可以查看 lnmp.conf 文件参数说明。\n安装步骤 运行上述命令后即可开始安装，目前提供了较多的 MySQL、MariaDB 版本和不安装数据库的选项，需要注意的是 MySQL 5.6,5.7 及 MariaDB 10 必须在 1G 以上内存的更高配置上才能选择！\n输入对应 MySQL 或 MariaDB 版本前面的序号，回车进入下一步：\n如果选择 MySQL 5.7、8.0 且是 x86 或 x86_64 架构会提示： Using Generic Binaries [y/n] 这一步是提示是否使用二进制安装，输入 y 为使用二进制安装，输入 n 为使用源码编译安装。\n设置 MySQL 的 root 密码（直接回车将会设置为 lnmp.org#随机数字）如果输入有错误需要删除时，可以按住 Ctrl 再按 Backspace 键进行删除(个别情况下是只需按 Backspace 键)。输入后回车进入下一步，如图：\n询问是否需要启用 MySQL InnoDB，InnoDB 引擎默认为开启，一般建议开启，直接回车或输入 y ，如果确定确实不需要该引擎可以输入 n\n输入要选择的 PHP 版本的序号，回车进入下一步，注意：选择 PHP 7+ 版本时需要自行确认 PHP 版本是否与自己的程序兼容：\n选择是否安装内存优化：可以选择不安装、 Jemalloc 或 TCmalloc ，输入对应序号回车，直接回车为默认为不安装。\n进行完上述操作后，会提示 Press any key to install...or Press Ctrl+c to cancel ，按回车键确认开始安装；LNMP 脚本就会自动安装编译 Nginx、MySQL、PHP、phpMyAdmin 等软件及相关的组件。\n安装时间可能会几十分钟到几个小时不等，主要是机器的配置网速等原因会造成影响。\nLNMP 一键安装包编译过程需要大量的时间，所以需要耐心等待。如果网络掉线，可以重新连接 SSH，再执行 screen -r lnmp 就会看到你的 lnmp 安装进程；如果没恢复窗口，可以输入 screen -ls 列出窗口进程，然后输入 screen -D -r XX(进程编号) 进行恢复： 完成安装 完成安装后，会显示如下：\n============================== Check install ============================== Checking ... Nginx: OK MySQL: OK PHP: OK PHP-FPM: OK Clean Web Server src directory... Nginx、MySQL、PHP 都是 running，80和3306端口都存在，并提示安装使用的时间及 Install lnmp V1.9 completed! enjoy it. 的话，说明已经安装成功。\n安装 PHP 组件 安装完 LNMP 后可以按自己的需求安装 eAccelerator、xcache、memcached、imageMagick、ionCube、redis、opcache。这几个 PHP 缓存、加速类的扩展不一定对每个人都能用，自己按需要安装，不用装多个同类的扩展，可能会导致出错。\n这些扩展和组件均采用 ./addons.sh 进行安装；基本用法说明：\n./addons.sh {install|uninstall} {eaccelerator|xcache|memcached|opcache|redis|imagemagick|ioncube} 例如安装常用的 Memcached、Redis、imageMagick 命令如下：\n./addons.sh install memcached # 安装 Memcached ./addons.sh install redis # 安装 Redis ./addons.sh install imagemagick # 安装 imageMagick 以安装 Memcached 为例，演示如下：\n安装完成提示：\nStarting Memcached... Starting memcached: done ====== Memcached install completed ====== Memcached installed successfully, enjoy it! 网站管理 添加/删除网站(虚拟主机) 虚拟主机管理基本命令介绍：\nlnmp vhost add # 添加网站 lnmp vhost list # 网站列表 lnmp vhost del # 删除网站 执行：lnmp vhost add 并按照下面操作添加网站（点击放大）：\n最后按下任意键，即可开始添加网站了，添加完成后提示如下：\n网站架设完成\n上传程序 直接使用 SFTP 软件登陆 root 账户进行上传，上传完成后设置相关权限即可。\n上传网站后建议执行：chown www:www -R /path/to/dir 对网站目录进行权限设置，/path/to/dir 替换为你网站目录。\n如果需要单独的 FTP 账户进行上传，那么就安装 FTP 服务器，并创建 FTP 用户进行上传\n安装 pureftpd 进入 LNMP 解压缩后的文件夹，输入 ./pureftpd.sh 会提示按任意键安装：\n按下任意键，等待安装完成，出现如下提示：\nFTP命令 lnmp ftp add # 添加FTP用户 lnmp ftp del # 删除FTP用户 lnmp ftp edit # 编辑FTP用户 总结 LNMP 一键安装包和 Oneinstack之间大差不差，只是一些细节之间的不同；可以按照自己的喜好进行选择，但它们都更适合有一定 Linux 使用基础的人，新手的话还是更建议使用可视化面板。\n最后贴上 LNMP 一键安装包详细的使用说明：LNMP 一键安装包常见问题 ","date":"2022-02-25T17:14:41+08:00","permalink":"/archives/lnmporg/","title":"LNMP 一键安装包开设网站"},{"content":"前言 什么是 LNMP LNMP代表的就是：Linux 系统下 Nginx+MySQL+PHP 这种网站服务器架构。 Linux 是一类 Unix 计算机操作系统的统称，是目前最流行的免费操作系统。代表版本有：debian、centos、ubuntu、fedora、gentoo 等。 Nginx 是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 Mysql 是一个小型关系型数据库管理系统。 PHP 是一种在服务器端执行的嵌入 HTML 文档的脚本语言。 这四种软件均为免费开源软件，组合到一起，成为一个免费、高效、扩展性强的网站服务系统。\n安装 Oneinstack 官网 OneinStack包含以下组合：\nlnmp（Linux + Nginx+ MySQL/MongoDB+ PHP） lamp（Linux + Apache+ MySQL/MongoDB+ PHP） lnmpa（Linux + Nginx+ MySQL/MongoDB+ PHP+ Apache）：Nginx 处理静态，Apache 处理动态 PHP lnmt（Linux + Nginx+ MySQL/MongoDB+ Tomcat）：Nginx 处理静态，Tomcat（JDK）处理 JAVA lnpp（Linux + Nginx+ PostgreSQL+ PHP） lapp（Linux + Apache+ PostgreSQL+ PHP） lnmh（Linux + Nginx+ MySQL+ HHVM） 安装说明 点击链接进入 OneinStack 官网，点击自动安装；然后选择自己所需要的组合，并视情况选择组件，然后就会生成相应的一键安装命令：\n为防止本地网络变化等不确定因素导致安装终止，先键入命令创建一个作业窗口：\nscreen -S lnmp 若报错先安装 screen ：\napt-get install -y screen 然后复制 OneinStack 一键安装命令粘贴至终端，接下来就是耐心等待，安装时间视你所选组件的多少以及服务器配置而定。\n安装完成后提示安装时长和组件路径：\n####################Congratulations######################## Total OneinStack Install Time: 28 minutes Nginx install dir: /usr/local/nginx Database install dir: /usr/local/mysql Database data dir: /data/mysql Database user: root Database password: oneinstack PHP install dir: /usr/local/php Opcache Control Panel URL: http://192.168.0.160/ocp.php Pure-FTPd install dir: /usr/local/pureftpd Create FTP virtual script: ./pureftpd_vhost.sh phpMyAdmin dir: /data/wwwroot/default/phpMyAdmin phpMyAdmin Control Panel URL: http://192.168.0.160/phpMyAdmin redis install dir: /usr/local/redis memcached install dir: /usr/local/memcached Index URL: http://192.168.0.160/ 此时键入 reboot 命令，重启 VPS。\n至此 LNMP 环境安装完成。\n开设站点 安装检查 首先打开浏览器，进入 Oneinstack 的默认首页，即服务器 IP 地址，就可以看到默认页面：\n到这说明已经成功搭建 Lnmp\n创建虚拟主机 键入下面命令，添加虚拟主机并绑定域名。\n注意域名应该提前解析至你的主机IP\ncd /root/oneinstack/ ./vhost.sh 流程如下：\n创建MySQL数据库 Oneinstack 提供 phpMyAdmin 在线管理 Mysql；打开浏览器，输入 ip/phpMyAdmin 登录到 phpMyAdmin：\n然后点击账户 \u0026gt; 新建用户账户，新增数据库与用户，并确认执行：\n创建完虚拟主机以及数据库后就可以上传程序并进行安装了\n扩展配置 添加附加组件 如果之前没有安装组件，后续补充安装，统一入口为 ./install.sh ，详细如下：\n####################################################################### # OneinStack for CentOS/RedHat 7+ Debian 9+ and Ubuntu 16+ # # For more information please visit https://oneinstack.com # ####################################################################### version: 2.6 updated date: 2022-09-03 Usage: ./install.sh command ...[parameters].... --help, -h Show this help message, More: https://oneinstack.com/auto --version, -v Show version info --nginx_option [1-3] Install Nginx server version --apache Install Apache --apache_mode_option [1-2] Apache2.4 mode, 1(default): php-fpm, 2: mod_php --apache_mpm_option [1-3] Apache2.4 MPM, 1(default): event, 2: prefork, 3: worker --php_option [1-11] Install PHP version --mphp_ver [53~81] Install another PHP version (PATH: /usr/local/php${mphp_ver}) --mphp_addons Only install another PHP addons --phpcache_option [1-4] Install PHP opcode cache, default: 1 opcache --php_extensions [ext name] Install PHP extensions, include zendguardloader,ioncube, sourceguardian,imagick,gmagick,fileinfo,imap,ldap,calendar,phalcon, yaf,yar,redis,memcached,memcache,mongodb,swoole,xdebug --nodejs Install Nodejs --tomcat_option [1-4] Install Tomcat version --jdk_option [1-2] Install JDK version --db_option [1-14] Install DB version --dbinstallmethod [1-2] DB install method, default: 1 binary install --dbrootpwd [password] DB super password --pureftpd Install Pure-Ftpd --redis Install Redis --memcached Install Memcached --phpmyadmin Install phpMyAdmin --python Install Python (PATH: /usr/local/python) --ssh_port [No.] SSH port --iptables Enable iptables --reboot Restart the server after installation 如之前没有安装 php redis 以及 imagick 扩展，补充安装命令： ./install.sh --php_extensions redis,imagick\n删除虚拟主机 cd /root/oneinstack ./vhost.sh --del 管理 FTP 账号 cd /root/oneinstack ./pureftpd_vhost.sh 备份管理 cd /root/oneinstack ./backup_setup.sh 总结 Oneinstack 是国内优秀的 LNMP 和 LAMP 生产环境的 Shell 程序，Oneinstack 最大的问题就是需要懂得一点Linux 知识，Oneinstack 自带了很多常用的静态规则，但碰到一些需要自定义的规则时就麻烦了。\n最后贴上一些基本使用手册： Oneinstack基本使用手册 ","date":"2022-02-23T17:14:41+08:00","permalink":"/archives/oneinstack/","title":"Oneinstack 一键安装 LNMP 及开设站点"},{"content":"前言 Caddy服务器（或称 Caddy Web）是一个开源的，使用 Golang 编写，支持 HTTP/2 的 Web 服务端，它使用 Golang 标准库提供 HTTP 功能。Caddy 一个显著的特性是默认启用 HTTPS，它是第一个无需额外配置即可提供 HTTPS 特性的 Web 服务器。Caddy 可以提供各种网站技术，它也可以作为反向代理和负载均衡器。Caddy 的大部分功能都以中间件的形式实现，并通过 Caddyfile 中的指令（用于配置 Caddy 的文本文件）进行控制。\n简单来说就是开箱即用\nCaddy 官网 安装 打开 Caddy 官网，点击下载源文件，或者按照官方教程中的安装方式进行安装，我服务器是 Debian，就使用命令行进行安装：\napt install -y debian-keyring debian-archive-keyring apt-transport-https curl -1sLf \u0026#39;https://dl.cloudsmith.io/public/caddy/stable/gpg.key\u0026#39; | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg curl -1sLf \u0026#39;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt\u0026#39; | tee /etc/apt/sources.list.d/caddy-stable.list apt update apt install caddy 安装完成后可输入 caddy version 或者 which caddy 看是否安装成功。\n注意：这里默认安装的是 Caddy2\n配置 安装完成后在浏览器输入服务器 IP 就可以看到 Caddy 已经开始运行了，并且生成了一个默认页面：\n这个时候我们创建好网站目录：\nmkdir -p /var/www/xx 然后我们可以对 Caddy 进行配置了，用 vim 命令对配置文件进行编辑，拿不准的可以下载下来编辑文件路径为 /etc/caddy/Caddyfile\nvim /etc/caddy/Caddyfile Caddy 的配置比较简单，第一行输入绑定好的域名，这样就会自动开启80和443端口：\nxx.com 然后是网站根目录设置：\nxx.com { root * /var/www/xx } 这样一个简单的站点就已经配置完成了，然后添加一些自己需要的功能，并且开启静态文件浏览：\nxx.com { root * /var/www/xx encode gzip file_server tls XX@email.com } 如果要开设多个站点，那么直接另起一行，进行其他站点的配置就行了：\nxx.com { root * /var/www/xx encode gzip file_server tls XX@email.com } www.xx.com { root * /var/www/yy tls xx@email.com } 或者将子域名重定向到主域名：\nxx.com { root * /var/www/xx encode gzip file_server tls XX@email.com } www.xx.com { redir https://xx.com } 我的设置参考：\n# 域名 domain.com { # 设置日志文件位置，等级为 error log { output file /var/log/caddy/xx.log level error } # 网站根目录 root * /var/www/xx # 开启 gzip encode gzip # 错误页面 handle_errors { rewrite * /{err.status_code}.html file_server } # PHP php_fastcgi unix//run/php/php7-fpm.sock # 静态文件服务 file_server # TLS设置 tls xx@email.com } 配置完成后输入以下命令检查配置：\ncaddy adapt --config /etc/caddy/Caddyfile 如未报错，则表示配置无误。\n重载 Caddy 配置：\ncaddy reload --config /etc/caddy/Caddyfile 重启 Caddy 并添加自启动\nsystemctl restart caddy systemctl enable caddy 一些基本的 Caddy 配置就是这么多了，详细内容可以到官方文档进行查阅：Caddy 官方文档 上传文件 最后我们将自己的静态文件页面上传至 /var/www/xxx 也就是你的网站根目录下即可进行访问啦！\n","date":"2022-02-20T16:30:17+08:00","permalink":"/archives/caddy/","title":"用 Caddy2 搭建静态页面站点"},{"content":"前言 由于最近在使用 VPS 时，发现 SSH 一直在被人暴力扫描，虽然说没有被破解，但是老是被人盯着总感觉不太舒服。其实要保证安全登录，最简单的方法就是修改默认的 22 端口；最彻底的方法，是禁用密码登录，改用密钥登录，只要保证密钥安全，服务器也没有人能进入了。而且现在手中的 VPS 越来越多，每次都要进行一些基本配置。所以对这些配置进行一下记录，方便以后查看。\n配置 修改登录密码 passwd 输入密码是不会显示的，按照提示输入新密码回车两次即可\n更新、安装基本软件 apt update \u0026amp;\u0026amp; apt dist-upgrade -y \u0026amp;\u0026amp; apt autoremove -y \u0026amp;\u0026amp; apt autoclean apt install -y wget curl vim screen 修改SSH端口 vim /etc/ssh/sshd_config 这里我使用 vim 编辑，拿不准可以直接下载到本地编辑\n找到默认 22 端口，将光标移动到该位置，输入 i 进行编辑；去掉前面的注释，并且添加一个端口：\nPort 22 Port 1234 # 以 1234 端口为例 编辑完成后按下 ESC 然后输入 :wq 保存退出，并重启 ssh 服务进程：\nsystemctl restart sshd 设置完毕后需要开放新端口，并开启防火墙；如果 VPS 管理面板自带防火墙可以通过管理面板开放端口；没有的话，我一般用 ufw：\napt install -y ufw ufw allow 1234 ufw enable 开启防火墙后记得通过 ufw allow xx 开放常用端口\n设置完成后，通过新端口进行 SSH 登录，测试是否成功，并且将默认的端口关闭：\nvim /etc/ssh/sshd_config 将默认端口一行注释掉：\n#Port 22 Port 1234 设置秘钥登录 修改端口虽然可以提升安全性，但是还是会被扫出端口，所以我们可以设置秘钥登录，并关闭密码登录。\n通过命令行生成公钥与私钥 ssh-keygen -t rsa 提示如下：\nGenerating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): # 输入存储位置，建议回车使用默认位置 Enter passphrase (empty for no passphrase): # 输入密码(留空则直接回车) Enter same passphrase again: # 重复输入密码 Your identification has been saved in /root/.ssh/id_rsa. Your public key has been saved in /root/.ssh/id_rsa.pub. # 公钥与私钥存储位置 生成的秘钥文件位于 ~/.ssh 目录下\n也可以通过 XShell 或者 PuTTy Gen 软件进行生成秘钥文件，但是要注意它们生成的私钥并不通用，需要通过 PuTTy Gen 进行转换。\n上传/配置公钥文件 如果是使用命令行在 VPS 生成的秘钥文件，则将私钥文件下载并导入 SSH 软件即可。若是软件生成，则将 id_rsa.pub 文件上传至 ~/.ssh 目录下，完成上述操作后执行如下命令：\nmv id_rsa.pub authorized_keys chmod 600 authorized_keys 然后修改 sshd_config 找到并修改成下面个配置 ：\nPubkeyAuthentication yes 保存退出，并重启服务进程：\nsystemctl restart sshd 使用 SSH 软件测试是否可以通过秘钥文件进行登录。\n禁止密码登录 确认可以通过秘钥文件进行登录后，就可以禁止密码登录了，修改 etc/ssh/sshd_config 文件，找到并修改成如下：\nPasswordAuthentication no 重启 ssh\nsystemctl restart sshd 开启加速服务 复制下面命令，粘贴回车：\nwget -N --no-check-certificate \u0026#34;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh\u0026#34; chmod +x tcp.sh ./tcp.sh 面板如下：\n操作方法：先安装内核，重启 VPS 让内核生效，再启动对应的加速即可。数字 1 的 BBR/BBR 魔改内核对应数字 4、5、6 的 BBR 加速、BBR 魔改加速和暴力 BBR 魔改版加速。数字 2 的 BBRplus 内核对应数字 7 的 BBRplus 加速。数字 3 的锐速加速内核对应数字 8 的锐速加速。\n先安装内核，等待提示重启后输入 y 进行重启：\n如果安装内核过程中，出现以下情况，选择否即可：\n重启完成后，输入 ./tcp.sh 进入加速面板，选择对应内核的加速并输入对应数字开启加速。看到提示加速成功后，再次输入 ./tcp.sh 检查是否成功开启\n如果想换一个加速，输入 ./tcp.sh 进入面板，并输入数字9进行卸载加速，然后进行同样的操作，安装内核再安装对应内核的加速即可。\n至此 VPS 的一些基本配置与优化结束\n","date":"2022-02-18T17:14:41+08:00","permalink":"/archives/setvps/","title":"VPS 的一些基本配置及优化"}]